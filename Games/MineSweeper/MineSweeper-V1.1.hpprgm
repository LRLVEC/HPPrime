//--------------global functions
Init();
DrawBigMap();
DrawSmallMap();
SetRoundMineNum(x, y);
DisplayLand(x, y, color);
DisplayNum(x, y);
DisplayAllMines();
DrawCursor(x, y);
TouchInput();
CursorMoved(p);
DigLand(p);
//--------------global variables
mapMode;//0:small[11*15], 1:big[24*32]
xm, ym, landNum;
player; //0:human, 1:AI
mineNum;
leftNum;
lands := {};
dugMine;
cursorPos;
beginGame;
endGame;
beginTime;
endTime;
//{
// 1:buried;[0:blank][1:buried a mine]
// 2:num;   [number of the mines around]
// 3:dug;   [0:not dug][1:dug]
//}
//--------------main
export MineSweeper()
begin
  Init();
  repeat
    while CursorMoved(TouchInput()) do end;
    DigLand(cursorPos(1), cursorPos(2));
  until dugMine or NOT leftNum;
  endTime := ticks() - beginTime;
  if leftNum then
    DisplayAllMines();
    freeze;
    msgbox("You lost!");
    //rect_p(G0, 110, 100, 210 - 1, 140 - 1, #000000h);
    //textout_p("You lost!", G0, 115, 105, 7, #FF0000h);
  else
    wait(0.5);
    msgbox("You won! Time used: " + string(endTime/1000, 0, 3) + "s");
    //rect_p(G0, 100, 90, 220 - 1, 150 - 1, #000000h);
    //textout_p("You won!", G0, 115, 90, 7, #FF00h);
    //textout_p("Time: "+ string(endTime/1000, 0, 3), G0, 102, 120, 7, #FF00h);
  end;
end;
//Init
Init()
begin
  mapMode := 0;
  dugMine := 0;
  beginGame := 1;
  endGame := 0;
  while NOT choose(mapMode,"地图模式",{"小地图","大地图"})do end;
  mapMode := mapMode - 1;
  if mapMode = 0 then //small map
    xm := 15;
    ym := 11;
  else                  //big map
    xm := 32;
    ym := 24;
  end;
  landNum := xm * ym;
  local flag := 0;
  repeat
    flag := input(mineNum, mineNum);
    flag := flag and(mineNum >= 0)and(mineNum <= landNum);
  until flag;
  mineNum := round(mineNum);
  leftNum := xm*ym - mineNum;
  local c0,c1;
  if mapMode = 0 then //small map
    DrawSmallMap();
  else                  //big map
    DrawBigMap();
  end;
  lands := {};
  for c1 from 1 to ym do
    for c0 from 1 to xm do
      lands(c1, c0) := {0, 0, 0};
    end;
  end;
  for c0 from 1 to mineNum do
    local xt, yt;
    repeat
      xt := randint(1, xm);
      yt := randint(1, ym);
    until
      NOT lands(yt, xt, 1);
    lands(yt, xt, 1) := 1;
    SetRoundMineNum(xt, yt);
  end;
  cursorPos := {randint(1, xm), randint(1, ym)};
  DrawCursor(cursorPos, #FF0000h);
end;
//SetRoundMineNum
SetRoundMineNum(x, y)
begin
  local x0 := max(x - 1, 1), x1 := min(x + 1, xm);
  local y0 := max(y - 1, 1), y1 := min(y + 1, ym);
  local c0, c1;
  local num := 0;
  for c1 from y0 to y1 do
    for c0 from x0 to x1 do
      lands(c1, c0, 2) := lands(c1, c0, 2) + 1;
    end;
  end;
  return num;
end;
//DrawSmallMap
DrawSmallMap()
begin
  rect_p(G0, 0, 0, 319, 239, #A0A0A0h);
  local c0;
  for c0 from 0 to 16 do
    line_p(G0, 21 * c0 + 2, 0, 21 * c0 + 2, 239, #0h);
  end;
  for c0 from 0 to 11 do
    line_p(G0, 0, 21 * c0 + 4, 319, 21 * c0 + 4, #0h);
  end;
  rect_p(G0, 0, 0, 319, 3, #888888h);
  rect_p(G0, 0, 236, 319, 239, #888888h);
  rect_p(G0, 0, 0, 1, 239, #888888h);
  rect_p(G0, 318, 0, 319, 239, #888888h);
end;
//DrawBigMap
DrawBigMap()
begin
  rect_p(G0, 0, 0, 319, 239, #A0A0A0h);
  local c0;
  for c0 from 1 to 32 do
    line_p(G0, 10 * c0 - 1, 0, 10 * c0 - 1, 239, #0h);
  end;
  for c0 from 0 to 24 do
    line_p(G0, 0, 10 * c0 - 1, 319, 10 * c0 - 1, #0h);
  end;
end;
//DisplayLand
DisplayLand(x, y, color)
begin
  ifte(mapMode,
    rect_p(G0, 10*x - 10, 10*y - 10, 10*x - 2, 10*y - 2, color),
    rect_p(G0, 21*x - 18, 21*y - 16, 21*x + 1, 21*y + 3, color)
  );
end;
//DisplayNum
DisplayNum(x, y)
begin
  local num := lands(y, x, 2);
  if num then
    ifte(mapMode,
      textout_p(string(num), G0, 10*x -  8, 10*y - 10, 1, #C8C8C8h),
      textout_p(string(num), G0, 21*x - 13, 21*y - 16, 4, #C8C8C8h)
    );
  end;
end;
//DisplayAllMines
DisplayAllMines()
begin
  local c0, c1;
  for c1 from 1 to ym do
    for c0 from 1 to xm do
      ifte(lands(c1, c0, 1),
        DisplayLand(c0, c1, #FF0000h),
        (DisplayLand(c0, c1, #141414h),DisplayNum(c0, c1))
      );
    end;
  end;
end;
//DrawCursor
DrawCursor(p, color)
begin
  if mapMode then
    line_p(G0, 10*p(1) - 11, 10*p(2) - 11, 10*p(1) - 1, 10*p(2) - 11, color);
    line_p(G0, 10*p(1) - 11, 10*p(2) - 1, 10*p(1) - 1, 10*p(2) - 1, color);
    line_p(G0, 10*p(1) - 11, 10*p(2) - 10, 10*p(1) - 11, 10*p(2) - 2, color);
    line_p(G0, 10*p(1) - 1, 10*p(2) - 10, 10*p(1) - 1, 10*p(2) - 2, color);
  else
    line_p(G0, 21*p(1) - 19, 21*p(2) - 17, 21*p(1) + 2, 21*p(2) - 17, color);
    line_p(G0, 21*p(1) - 19, 21*p(2) + 4, 21*p(1) + 2, 21*p(2) + 4, color);
    line_p(G0, 21*p(1) - 19, 21*p(2) - 16, 21*p(1) - 19, 21*p(2) + 3, color);
    line_p(G0, 21*p(1) + 2, 21*p(2) - 16, 21*p(1) + 2, 21*p(2) + 3, color);
  end;
end;
//TouchInput
TouchInput()
begin
  local touch := {0, 0};
  repeat
    touch := {mouse(0) + 1, mouse(1) + 1};
    if mapMode then
      touch := ceiling((touch - {0, 0})/10);
    else
      touch := ceiling((touch - {3, 3})/21);
    end;
    local j := getkey();
    local d := {0, 0};
    case
      if j = 8 then d := {1, 0};end;
      if j = 7 then d := {-1, 0};end;
      if j = 12 then d := {0, 1};end;
      if j = 2 then d := {0, -1};end;
      if j = 30 then touch := cursorPos;break; end;
    end;
    if NOT eq(d, {0, 0}) then
      touch := cursorPos + d;
    end;
  until (touch(1)>0)and(touch(1)<=xm)and(touch(2)>0)and(touch(2)<=ym);
  if beginGame then
    beginGame := 0;
    beginTime := ticks();
  end;
  return touch;
end;
//CursorMoved
CursorMoved(p)
begin
  if eq(p, cursorPos) then
    return 0;
  else
    DrawCursor(cursorPos, #0h);
    DrawCursor(p, #FF0000h);
    cursorPos := p;
    return 1;
  end;
end;
//DigLand
DigLand(x, y)
begin
  if NOT lands(y, x, 3) then
    if lands(y, x, 1) then
      dugMine := 1;
    else
      lands(y, x, 3) := 1;
      leftNum := leftNum - 1;
      DisplayLand(x, y, #141414h);
      DisplayNum(x, y);
      if NOT lands(y, x, 2) then
        local x0 := max(x - 1, 1), x1 := min(x + 1, xm);
        local y0 := max(y - 1, 1), y1 := min(y + 1, ym);
        local c0, c1;
        for c1 from y0 to y1 do
          for c0 from x0 to x1 do
            if NOT(lands(c1, c0, 3)or lands(c1, c0, 1)) then
              DigLand(c0, c1);
            end;
          end;
        end;
      end;
    end;
  end;
end;




















