<?xml version="1.0" encoding="UTF-8" ?>
<NotepadPlus>
	<AutoComplete language="HP Prime">
		<Environment ignoreCase="no" startFunc="(" stopFunc=")" paramSeparator="," terminal=";" additionalWordChar = "."/>
		<KeyWord name="&#x0394;LIST" func="yes">
			<Overload retVal="" descr="Creates a new list composed of the first differences of a given list; that is, the differences between the sequential elements in a list. &#x0a;The new list has one fewer elements than the original list.">
				<Param name="list" />
			</Overload>
		</KeyWord>
		<KeyWord name="&#x03A0;LIST" func="yes">
			<Overload retVal="" descr="Calculates the product of all elements in a list.">
				<Param name="list" />
			</Overload>
		</KeyWord>
		<KeyWord name="&#x03A3;" func="yes">
			<Overload retVal="" descr="Finds the sum of Expr with respect to Var as Var goes from Ivalue to Fvalue in steps of one.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="Ivalue" />
				<Param name="Fvalue" />
			</Overload>
		</KeyWord>
		<KeyWord name="&#x03A3;LIST" func="yes">
			<Overload retVal="" descr="Calculates the sum of all elements in a list.">
				<Param name="list" />
			</Overload>
		</KeyWord>
		<KeyWord name="ⁿ&#x221A;" />
		<KeyWord name="&#x2192;HMS" func="yes">
			<Overload retVal="" descr="Converts a decimal value to sexagesimal format; that is, in units subdivided into groups of 60. This includes degrees, minutes, and seconds as well as hours, minutes, and seconds.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="&#x2202;" func="yes">
			<Overload retVal="" descr="Numerical derivative. Returns the numerical derivative of an expression, with respect to a variable, at a given value.">
				<Param name="Expr" />
				<Param name="Var=Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="&#x222B;" func="yes">
			<Overload retVal="" descr="Returns the integral of an expression. With one expression as argument, returns the indefinite integral with respect to x. &#x0a;With the optional second, third and fourth arguments you can specify the variable of integration and the bounds for a definite integral.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="Val1" />
				<Param name="Val2" />
			</Overload>
		</KeyWord>
		<KeyWord name="%CHANGE" func="yes">
			<Overload retVal="" descr="Percent change from x to y. Returns 100*(y-x)/x.">
				<Param name="x" />
				<Param name="y" />
			</Overload>
		</KeyWord>
		<KeyWord name="%TOTAL" func="yes">
			<Overload retVal="" descr="Percent total; the percentage of x that is y. Returns 100*y/x.">
				<Param name="x" />
				<Param name="y" />
			</Overload>
		</KeyWord>
		<KeyWord name=".*" />
		<KeyWord name=".+" />
		<KeyWord name=".-" />
		<KeyWord name="./" />
		<KeyWord name=".^" />
		<KeyWord name=":=" />
		<KeyWord name="ABS" func="yes">
			<Overload retVal="" descr="Returns the absolute value of the expression.">
				<Param name="expr" />
			</Overload>
			<Overload retVal="" descr="Returns the Frobenius (Euclidean) norm of the array.">
				<Param name="matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="ACOS" func="yes">
			<Overload retVal="" descr="Returns the inverse cosine of Value. The output depends on the Angle Measure setting in Home Settings, CAS Settings, or Symbolic Setup.">
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="ACOSH" func="yes">
			<Overload retVal="" descr="Inverse Hyperbolic Cosine">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="ACOT" func="yes">
			<Overload retVal="" descr="Inverse of the Cotangent function.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="ACSC" func="yes">
			<Overload retVal="" descr="Inverse of the Cosecant function.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="ADDCOL" func="yes">
			<Overload retVal="" descr="Inserts values from vector into a column before column_number in the specified matrix. The size of vector must be the same as the number of rows in the matrix matrixname.">
				<Param name="matrixname" />
				<Param name="vector" />
				<Param name="column_number" />
			</Overload>
		</KeyWord>
		<KeyWord name="ADDROW" func="yes">
			<Overload retVal="" descr="Inserts values from vector into a row before row_number in the specified matrix. The size of vector must be the same as the number of columns in the matrix matrixname.">
				<Param name="matrixname" />
				<Param name="vector" />
				<Param name="row_number" />
			</Overload>
		</KeyWord>
		<KeyWord name="ALOG" func="yes">
			<Overload retVal="" descr="This is more accurate than 10^x due to limitations of the power function.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="AND" />
		<KeyWord name="ARC" func="yes">
			<Overload retVal="" descr="Draws a circle on GROB G, centered at (x,y) (Cartesian coordinates), with radius r.">
				<Param name="G" />
				<Param name="x" />
				<Param name="y" />
				<Param name="r" />
				<Param name="[color]" />
			</Overload>
			<Overload retVal="" descr="Draws an arc from &#x2220;1 to &#x2220;2 of a circle on GROB G, centered at (x,y) (Cartesian coordinates), with radius r using the current angle mode.">
				<Param name="G" />
				<Param name="x" />
				<Param name="y" />
				<Param name="r" />
				<Param name="[[&#x2220;1" />
				<Param name="&#x2220;2]" />
				<Param name="[color]]" />
			</Overload>
			<Overload retVal="" descr="Draws a circle arc given by 2 vertices and the angle at center (Cartesian coordinates). Center will be stored in C and the radius in r.">
				<Param name="Pnt" />
				<Param name="Pnt" />
				<Param name="Real" />
				<Param name="[Var(C)]" />
				<Param name="[Var(r)]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ARC_P" func="yes">
			<Overload retVal="" descr="Draws a circle on GROB G, centered at (x,y) (pixel coordinates), with radius r.">
				<Param name="G" />
				<Param name="x" />
				<Param name="y" />
				<Param name="r" />
				<Param name="[color]" />
			</Overload>
			<Overload retVal="" descr="Draws an arc from &#x2220;1 to &#x2220;2 of a circle on GROB G, centered at (x,y) (pixel coordinates), with radius r using the current angle mode.">
				<Param name="G" />
				<Param name="x" />
				<Param name="y" />
				<Param name="r" />
				<Param name="&#x2220;1" />
				<Param name=" &#x2220;2" />
				<Param name="[color]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ARG" func="yes">
			<Overload retVal="" descr="Finds the angle determined by a complex number.">
				<Param name="x+yi" />
			</Overload>
		</KeyWord>
		<KeyWord name="ASC" func="yes">
			<Overload retVal="" descr="Returns a vector containing the numerical Unicode values of String.">
				<Param name="String" />
			</Overload>
		</KeyWord>
		<KeyWord name="ASEC" func="yes">
			<Overload retVal="" descr="Inverse of the Secant function.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="ASIN" func="yes">
			<Overload retVal="" descr="Returns the inverse sine of Value. The output depends on the Angle Measure setting in Home Settings, CAS Settings, or Symbolic Setup.">
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="ASINH" func="yes">
			<Overload retVal="" descr="Inverse Hyperbolic Sine">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="ATAN" func="yes">
			<Overload retVal="" descr="Returns the inverse tangent of Value. The output depends on the Angle Measure setting in Home Settings, CAS Settings, or Symbolic Setup.">
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="ATANH" func="yes">
			<Overload retVal="" descr="Inverse Hyperbolic Tangent">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="Airy_Ai" func="yes">
			<Overload retVal="" descr="Returns the Ai value of the Airy function solution of w'-xw=0.">
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="Airy_Bi" func="yes">
			<Overload retVal="" descr="Returns the Bi value of the Airy function solution of w'-xw=0.">
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ans" func="yes">
			<Overload retVal="" descr="In Home view, Ans returns the result of the last calculation made in Home view to its full precision. The variable Ans is different from the numbers in Home's history. &#x0a;A value in Ans is stored internally with the full precision of the calculated result, whereas the displayed numbers match the display mode. &#x0a;Ans(n) returns the nth entry in the Home view history. In CAS view, Ans returns the last result in the CAS history and Ans(n) does not recall the nth item in history. &#x0a;Here, Ans(n) will attempt to substitute n for x (or the default variable) in the last item in history and return the result. &#x0a;In CAS view, if Ans is a matrix, Ans(m,n) returns the element in row m and column n.">
				<Param name="[m]" />
				<Param name="[n]" />
			</Overload>
		</KeyWord>
		<KeyWord name="B&#x2192;R" func="yes">
			<Overload retVal="" descr="Converts an integer in base m to a decimal integer (base10). The base marker m can be b (for binary), o (for octal), or h (for hexadecimal).">
				<Param name="#integer[m]" />
			</Overload>
		</KeyWord>
		<KeyWord name="BEGIN" />
		<KeyWord name="BINOMIAL" func="yes">
			<Overload retVal="" descr="Computes the probability of k successes out of n trials, each with a probability of success of p. Note that n and k are integers with k&#x2264;n.">
				<Param name="n" />
				<Param name="p" />
				<Param name="k" />
			</Overload>
		</KeyWord>
		<KeyWord name="BINOMIAL_CDF" func="yes">
			<Overload retVal="" descr="Cumulative binomial distribution function. Returns the probability of k or fewer successes out of n trials, with a probability of success, p for each trial. &#x0a;Note that n and k are integers with k&#x2264;n. With the optional fourth argument k2, returns the cumulative probability for the two k-values; that is, the probability of between k and k2 successes.">
				<Param name="n" />
				<Param name="p" />
				<Param name="k" />
				<Param name="[k2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="BINOMIAL_ICDF" func="yes">
			<Overload retVal="" descr="Inverse cumulative binomial distribution function. Returns the number of successes, k, out of n trials, each with a probability of p, such that the probability of k or fewer successes is q.">
				<Param name="n" />
				<Param name="p" />
				<Param name="q" />
			</Overload>
		</KeyWord>
		<KeyWord name="BITAND" func="yes">
			<Overload retVal="" descr="Returns the bitwise logical AND of the specified integers.">
				<Param name="int1" />
				<Param name="int2" />
				<Param name="&#x2026; intn" />
			</Overload>
		</KeyWord>
		<KeyWord name="BITNOT" func="yes">
			<Overload retVal="" descr="Returns the bitwise logical NOT of the specified integer.">
				<Param name="int" />
			</Overload>
		</KeyWord>
		<KeyWord name="BITOR" func="yes">
			<Overload retVal="" descr="Returns the bitwise logical OR of the specified integers.">
				<Param name="int1" />
				<Param name="int2" />
				<Param name="&#x2026; intn" />
			</Overload>
		</KeyWord>
		<KeyWord name="BITSL" func="yes">
			<Overload retVal="" descr="Takes one or two integers as input and returns the result of shifting the bits in the first integer to the left by one place.">
				<Param name="int1" />
			</Overload>
			<Overload retVal="" descr="Takes one or two integers as input and returns the result of shifting the bits in the first integer to the left by the number of places indicated by the second integer.">
				<Param name="int1" />
				<Param name="[int2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="BITSR" func="yes">
			<Overload retVal="" descr="Takes one or two integers as input and returns the result of shifting the bits in the first integer to the right by one place.">
				<Param name="int1" />
			</Overload>
			<Overload retVal="" descr="Takes one or two integers as input and returns the result of shifting the bits in the first integer to the right by the number of places indicated by the second integer.">
				<Param name="int1" />
				<Param name="[int2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="BITXOR" func="yes">
			<Overload retVal="" descr="Returns the bitwise logical exclusive OR of the specified integers.">
				<Param name="int1" />
				<Param name="int2" />
				<Param name="&#x2026; intn" />
			</Overload>
		</KeyWord>
		<KeyWord name="BLIT" func="yes">
			<Overload retVal="" descr="Copies the region of graphic srcG between point (sx1, sy1) and (sx2, sy2) into the region of trgtG between points (dx1, dy1) and (dx2, dy2). &#x0a;Pixels from srcG that are color c are not copied. alpha is a number from 0 (transparent) to 255 (opaque) which represent the transparency (alpha channel) of the source bitmap.">
				<Param name="[trgtG]" />
				<Param name="[dx1" />
				<Param name="dy1]" />
				<Param name="[dx2" />
				<Param name="dy2]" />
				<Param name="srcG" />
				<Param name="[sx1" />
				<Param name="sy1]" />
				<Param name="[sx2" />
				<Param name="sy2]" />
				<Param name="[c]" />
				<Param name="[alpha]" />
			</Overload>
		</KeyWord>
		<KeyWord name="BLIT_P" func="yes">
			<Overload retVal="" descr="Copies the region of graphic srcG between point (sx1, sy1) and (sx2, sy2) into the region of trgtG between points (dx1, dy1) and (dx2, dy2). &#x0a;Pixels from srcG that are color c are not copied. alpha is a number from 0 (transparent) to 255 (opaque) which represent the transparency (alpha channel) of the source bitmap.">
				<Param name="[trgtG]" />
				<Param name="[dx1" />
				<Param name="dy1]" />
				<Param name="[dx2" />
				<Param name="dy2]" />
				<Param name="srcG" />
				<Param name="[sx1" />
				<Param name="sy1]" />
				<Param name="[sx2" />
				<Param name="sy2]" />
				<Param name="[c]" />
			</Overload>
		</KeyWord>
		<KeyWord name="BREAK" />
		<KeyWord name="Beta" func="yes">
			<Overload retVal="" descr="Returns the value of the Beta function for two values, x and y, defined as Gamma(x)*Gamma(y)/Gamma(x+y).">
				<Param name="x" />
				<Param name="y" />
			</Overload>
		</KeyWord>
		<KeyWord name="C&#x2192;PX" func="yes">
			<Overload retVal="" descr="Converts from Cartesian coordinates to screen coordinates.">
				<Param name="x" />
				<Param name="y" />
			</Overload>
			<Overload retVal="" descr="Converts from Cartesian coordinates to screen coordinates.">
				<Param name="{x" />
				<Param name="y}" />
			</Overload>
		</KeyWord>
		<KeyWord name="CAS" func="yes">
			<Overload retVal="" descr="Evaluate an expression or variable using the CAS. Note that outputs in numerical mode are transformed into strings or lists of expressions for symbolic matrices.">
				<Param name="expression" />
			</Overload>
		</KeyWord>
		<KeyWord name="CASE" />
		<KeyWord name="CEILING" func="yes">
			<Overload retVal="" descr="Least integer greater than or equal to value.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="CHAR" func="yes">
			<Overload retVal="" descr="Returns the string corresponding to the numerical Unicode character code of Integer.">
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Returns the string corresponding to the numerical Unicode character codes in List.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Returns the string corresponding to the numerical Unicode character codes in Vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="CHISQUARE" func="yes">
			<Overload retVal="" descr="&#x03C7;&#x00B2; (Chi-squared) probability density function. Computes the probability density of the &#x03C7;&#x00B2; distribution at x, given n degrees of freedom.">
				<Param name="n" />
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="CHISQUARE_CDF" func="yes">
			<Overload retVal="" descr="Cumulative &#x03C7;&#x00B2; (Chi-squared) distribution function. With two values (n and x) returns the lower-tail probability of the &#x03C7;&#x00B2; probability density function for the value x, given n degrees of freedom. &#x0a;With the optional third argument x2, returns the area under the &#x03C7;&#x00B2; probability density function between the two x-values.">
				<Param name="n" />
				<Param name="x" />
				<Param name="[x2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="CHISQUARE_ICDF" func="yes">
			<Overload retVal="" descr="Inverse cumulative &#x03C7;&#x00B2; (Chi-squared) distribution function. Returns the value x such that the &#x03C7;&#x00B2; lower-tail probability of x, with n degrees of freedom, is p.">
				<Param name="n" />
				<Param name="p" />
			</Overload>
		</KeyWord>
		<KeyWord name="CHOOSE" func="yes">
			<Overload retVal="" descr="Displays a choose box with the given &quot;title&quot; and containing items with the strings &quot;item1&quot;, etc. &#x0a;If the user chooses an object, var will be updated to contain the number of the selected object (an integer, 1, 2, 3, &#x2026;); &#x0a;otherwise, stores zero in var if the user exits without choosing. Returns true (non zero) if the user selects an object, otherwise returns false (0).">
				<Param name="var" />
				<Param name="&quot;title&quot;" />
				<Param name="&quot;item1&quot;" />
				<Param name="&quot;item2&quot;" />
				<Param name="[&#x2026;&quot;item14&quot;]" />
			</Overload>
			<Overload retVal="" descr="Displays a choose box with the given &quot;title&quot; and containing items with the strings &quot;item1&quot;, etc. &#x0a;If the user chooses an object, var will be updated to contain the number of the selected object (an integer, 1, 2, 3, &#x2026;); &#x0a;otherwise, stores zero in var if the user exits without choosing. Returns true (non zero) if the user selects an object, otherwise returns false (0).">
				<Param name="var" />
				<Param name="&quot;title&quot;" />
				<Param name="{&quot;item1&quot;...&quot;itemN&quot;}" />
			</Overload>
		</KeyWord>
		<KeyWord name="COLNORM" func="yes">
			<Overload retVal="" descr="Finds the maximum value (over all columns) of the sums of the absolute values of all elements in a matrix.">
				<Param name="matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="COMB" func="yes">
			<Overload retVal="" descr="Returns the number of combinations (without regard to order) of n things taken r at a time: n!/(r!(n-r)!)">
				<Param name="n" />
				<Param name="r" />
			</Overload>
		</KeyWord>
		<KeyWord name="CONCAT" func="yes">
			<Overload retVal="" descr="Concatenates an item into a list.">
				<Param name="List" />
				<Param name="Item" />
			</Overload>
			<Overload retVal="" descr="Concatenates two lists.">
				<Param name="List1" />
				<Param name="List2" />
			</Overload>
			<Overload retVal="" descr="Concatenates two strings or two sequences or 2 matrices.">
				<Param name="Obj1" />
				<Param name="Obj2" />
			</Overload>
			<Overload retVal="" descr="Concatenates items into a list.">
				<Param name="value1" />
				<Param name="value2" />
				<Param name="[..value16]" />
			</Overload>
		</KeyWord>
		<KeyWord name="COND" func="yes">
			<Overload retVal="" descr="Finds the 1-norm (column norm) of a square matrix.">
				<Param name="matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="CONJ" func="yes">
			<Overload retVal="" descr="Reverses the sign of the imaginary part of a complex number.">
				<Param name="Complex" />
			</Overload>
			<Overload retVal="" descr="Reverses the sign of the imaginary part of a complex number.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Reverses the sign of the imaginary part of a complex number.">
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Reverses the sign of the imaginary part of a complex number.">
				<Param name="x+yi" />
			</Overload>
		</KeyWord>
		<KeyWord name="CONTINUE" />
		<KeyWord name="CONVERT" func="yes">
			<Overload retVal="" descr="Converts Value Unit1 to the corresponding value in compatible Unit2.">
				<Param name="Value Unit1" />
				<Param name="1_Unit2" />
			</Overload>
		</KeyWord>
		<KeyWord name="COS" func="yes">
			<Overload retVal="" descr="Returns the cosine of Value. Value is interpreted as either degrees or radians, depending on the setting of Angle Measure in Home Settings, CAS Settings, or Symbolic Setup.">
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="COSH" func="yes">
			<Overload retVal="" descr="Hyperbolic Cosine">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="COT" func="yes">
			<Overload retVal="" descr="The Cotangent function; that is, cos(x)/sin(x).">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="CROSS" func="yes">
			<Overload retVal="" descr="Returns the cross product two vectors.">
				<Param name="Vector1" />
				<Param name="Vector2" />
			</Overload>
		</KeyWord>
		<KeyWord name="CSC" func="yes">
			<Overload retVal="" descr="The Cosecant function; that is, 1/sin(x)">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="CopyVar" func="yes">
			<Overload retVal="" descr="Copies the first variable into the second variable without evaluation.">
				<Param name="Var1" />
				<Param name="Var2" />
			</Overload>
		</KeyWord>
		<KeyWord name="DATEADD" func="yes">
			<Overload retVal="" descr="Adds NbDays to Date, returning the resulting date in YYYY.MMDD format.">
				<Param name="Date" />
				<Param name="NbDays" />
			</Overload>
		</KeyWord>
		<KeyWord name="DAYOFWEEK" func="yes">
			<Overload retVal="" descr="Day of the week. Given a date in YYYY.MMDD format, returns a number between 1 (Monday) and 7 (Sunday) which represents the day of the week associated with the date.">
				<Param name="Date" />
			</Overload>
		</KeyWord>
		<KeyWord name="DDAYS" func="yes">
			<Overload retVal="" descr="Calculates the numbers of days between 2 dates expressed in YYYY.MMDD format.">
				<Param name="Date1" />
				<Param name="Date2" />
			</Overload>
		</KeyWord>
		<KeyWord name="DEBUG" func="yes">
			<Overload retVal="" descr="Inserts a breakpoint in a program, calling the Debugging Environment. When the DEBUG; line in a program is found, the Debugger opens at the following line of code. &#x0a;You can also use this command in Home view to debug a program. DEBUG(name) opens the Debugger with the program name.">
				<Param name="" />
			</Overload>
			<Overload retVal="" descr="Inserts a breakpoint in a program, calling the Debugging Environment. When the DEBUG; line in a program is found, the Debugger opens at the following line of code. &#x0a;You can also use this command in Home view to debug a program. DEBUG(name) opens the Debugger with the program name.">
				<Param name="ProgramName(arguments)" />
			</Overload>
		</KeyWord>
		<KeyWord name="DELCOL" func="yes">
			<Overload retVal="" descr="Deletes column column_number from matrix name.">
				<Param name="name" />
				<Param name="column_number" />
			</Overload>
		</KeyWord>
		<KeyWord name="DELROW" func="yes">
			<Overload retVal="" descr="Deletes row row_number from matrix name.">
				<Param name="name" />
				<Param name="row_number" />
			</Overload>
		</KeyWord>
		<KeyWord name="DET" func="yes">
			<Overload retVal="" descr="Determinant of a square matrix.">
				<Param name="matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="DIM" func="yes">
			<Overload retVal="" descr="Returns the number of characters in String.">
				<Param name="String" />
			</Overload>
		</KeyWord>
		<KeyWord name="DIMGROB" func="yes">
			<Overload retVal="" descr="Sets the dimensions of GROB G to w*h. Initializes the graphic G with color or with the graphic data provided in list. &#x0a;If the graphic is initialized using graphic data, then list is a list of integers. Each integer, as seen in base 16, describes one color every 16 bits. &#x0a;Colors are in A1R5G5B5 format (1 bit for alpha channel and 5 bits for R, G and B).">
				<Param name="G" />
				<Param name="w" />
				<Param name="h" />
				<Param name="list" />
			</Overload>
			<Overload retVal="" descr="Sets the dimensions of GROB G to w*h. Initializes the graphic G with color or with the graphic data provided in list. &#x0a;If the graphic is initialized using graphic data, then list is a list of integers. Each integer, as seen in base 16, describes one color every 16 bits. &#x0a;Colors are in A1R5G5B5 format (1 bit for alpha channel and 5 bits for R, G and B).">
				<Param name="G" />
				<Param name="w" />
				<Param name="h" />
				<Param name="[color]" />
			</Overload>
		</KeyWord>
		<KeyWord name="DIMGROB_P" func="yes">
			<Overload retVal="" descr="Sets the dimensions of GROB G to w*h. Initializes the graphic G with color or with the graphic data provided in list. &#x0a;If the graphic is initialized using graphic data, then list is a list of integers. Each integer, as seen in base 16, describes one color every 16 bits. &#x0a;Colors are in A1R5G5B5 format (1 bit for alpha channel and 5 bits for R, G and B).">
				<Param name="G" />
				<Param name="w" />
				<Param name="h" />
				<Param name="list" />
			</Overload>
			<Overload retVal="" descr="Sets the dimensions of GROB G to w*h. Initializes the graphic G with color or with the graphic data provided in list. &#x0a;If the graphic is initialized using graphic data, then list is a list of integers. Each integer, as seen in base 16, describes one color every 16 bits. &#x0a;Colors are in A1R5G5B5 format (1 bit for alpha channel and 5 bits for R, G and B).">
				<Param name="G" />
				<Param name="w" />
				<Param name="h" />
				<Param name="[color]" />
			</Overload>
		</KeyWord>
		<KeyWord name="DO" />
		<KeyWord name="DOT" func="yes">
			<Overload retVal="" descr="Returns the dot product of two vectors.">
				<Param name="Vector1" />
				<Param name="Vector2" />
			</Overload>
		</KeyWord>
		<KeyWord name="DRAWMENU" func="yes">
			<Overload retVal="" descr="Draws a six-button menu at the bottom of the display, with labels string1, string2, &#x2026;, string6, or using the provided graphic (G0-G9 or &quot;icon name&quot;).">
				<Param name="string1 or graphic" />
				<Param name="string2 or graphic" />
				<Param name="&#x2026; string6 or graphic" />
			</Overload>
		</KeyWord>
		<KeyWord name="Dirac" func="yes">
			<Overload retVal="" descr="Returns the value of the Dirac delta function for a real number.">
				<Param name="Real" />
			</Overload>
		</KeyWord>
		<KeyWord name="DrawSlp" func="yes">
			<Overload retVal="" descr="Given three real numbers a, b, and m, draws a line with slope m that passes through the point (a, b).">
				<Param name="a" />
				<Param name="b" />
				<Param name="m" />
			</Overload>
		</KeyWord>
		<KeyWord name="EDITLIST" func="yes">
			<Overload retVal="" descr="Allows the user to edit the specified list. If a list variable is used (e.g., L0-L9), updates the variable if OK is clicked. &#x0a;The title can be either &quot;title&quot; or { &quot;title&quot;, {&quot;row names&quot;&#x2026;}, {&quot;column names&quot;&#x2026;}} &quot;title&quot; will be displayed above the editor as a &quot;title&quot; or &quot;name&quot;. &#x0a;If &quot;row names&quot; and &quot;column names&quot; are specified, they will be used as row and column headers. If read only is non 0, the user will not be able to modify the object. Returns the edited list upon completion.">
				<Param name="listvar or list" />
				<Param name="[title]" />
				<Param name="[read only]" />
			</Overload>
		</KeyWord>
		<KeyWord name="EDITMAT" func="yes">
			<Overload retVal="" descr="Allows the user to edit or view a specified matrix. If a matrix variable is used (e.g., M0- M9), updates the variable when the user taps the OK menu key. &#x0a;The optional title can be either &quot;title&quot; or { &quot;title&quot;, {&quot;row names&quot;&#x2026;}, {&quot;column names&quot;&#x2026;}} If supplied, &quot;title&quot; will be displayed at the top of the editor. &#x0a;If &quot;row names&quot; and &quot;column names&quot; are specified, they will be used as row and column headers in the editor. If read only is not 0, the user will not be able to modify the matrix, but can only view it. EDITMAT returns the edited matrix upon completion. If used in programming, returns to the program when the user taps the OK menu key.">
				<Param name="matrix" />
				<Param name="[title]" />
				<Param name="[read only]" />
			</Overload>
			<Overload retVal="" descr="Allows the user to edit or view a specified matrix. If a matrix variable is used (e.g., M0- M9), updates the variable when the user taps the OK menu key. &#x0a;The optional title can be either &quot;title&quot; or { &quot;title&quot;, {&quot;row names&quot;&#x2026;}, {&quot;column names&quot;&#x2026;}} If supplied, &quot;title&quot; will be displayed at the top of the editor. &#x0a;If &quot;row names&quot; and &quot;column names&quot; are specified, they will be used as row and column headers in the editor. If read only is not 0, the user will not be able to modify the matrix, but can only view it. EDITMAT returns the edited matrix upon completion. If used in programming, returns to the program when the user taps the OK menu key.">
				<Param name="matrixvar" />
				<Param name="[title]" />
				<Param name="[read only]" />
			</Overload>
		</KeyWord>
		<KeyWord name="EIGENVAL" func="yes">
			<Overload retVal="" descr="Displays the eigenvalues in vector form for matrix.">
				<Param name="matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="EIGENVV" func="yes">
			<Overload retVal="" descr="Eigenvectors and Eigenvalues for a square matrix. Displays a list of two arrays. The first contains the eigenvectors and the second contains the eigenvalues.">
				<Param name="matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="ELSE" />
		<KeyWord name="END" />
		<KeyWord name="EVAL" func="yes">
			<Overload retVal="" descr="Evaluates an expression.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="EVALLIST" func="yes">
			<Overload retVal="" descr="Evaluates the content of each element in the list and returns the resulting list.">
				<Param name="{list}" />
			</Overload>
		</KeyWord>
		<KeyWord name="EXECON" func="yes">
			<Overload retVal="" descr="Creates a new list based on the elements in one or more lists by iteratively modifying each element according to an expression that contains the ampersand character (&amp;).">
				<Param name="&amp;Expr" />
				<Param name="List1" />
				<Param name="[List2, &#x2026;]" />
			</Overload>
		</KeyWord>
		<KeyWord name="EXP" func="yes">
			<Overload retVal="" descr="Returns the solution to the mathematical constant e to the power of an expression. This is more accurate than e^x due to limitations of the power function.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="EXPM1" func="yes">
			<Overload retVal="" descr="This is more accurate than EXP when x is close to zero.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="EXPORT" />
		<KeyWord name="EXPR" func="yes">
			<Overload retVal="" descr="Parses a string into a number or expression and returns the result evaluated.">
				<Param name="String" />
			</Overload>
		</KeyWord>
		<KeyWord name="Ei" func="yes">
			<Overload retVal="" descr="For a real value x, returns the approximate value of int(e^(t)/t, -&#x221E;, x)">
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="FILLPOLY" func="yes">
			<Overload retVal="" descr="Fills the polygon specified by the provided Cartesian coordinates using the color provided. If Alpha (0 to 255) is provided, the polygon is drawn with transparency.">
				<Param name="[G]" />
				<Param name="[Coordinates]" />
				<Param name="Color" />
				<Param name="[Alpha]" />
			</Overload>
		</KeyWord>
		<KeyWord name="FILLPOLY_P" func="yes">
			<Overload retVal="" descr="Fills the polygon specified by the provided pixel coordinates using the color provided. If Alpha (0 to 255) is provided, the polygon is drawn with transparency.">
				<Param name="[G]" />
				<Param name="[Coordinates]" />
				<Param name="Color" />
				<Param name="[Alpha]" />
			</Overload>
		</KeyWord>
		<KeyWord name="FISHER" func="yes">
			<Overload retVal="" descr="F (Fisher or Fisher-Snedecor) probability density function. Computes the probability density at the value x, given numerator n and denominator d degrees of freedom.">
				<Param name="n" />
				<Param name="d" />
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="FISHER_CDF" func="yes">
			<Overload retVal="" descr="Cumulative F (Fisher or Fisher-Snedecor) distribution function. Returns the lower-tail probability of the F probability density function for the value x, given numerator n and denominator d degrees of freedom. &#x0a;With the optional fourth argument x2, returns the area under the F probability density function between the two x-values.">
				<Param name="n" />
				<Param name="d" />
				<Param name="x" />
				<Param name="[x2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="FISHER_ICDF" func="yes">
			<Overload retVal="" descr="Inverse cumulative F (Fisher or Fisher-Snedecor) distribution function. Returns the value x such that the F lower-tail probability of x, with numerator n, and denominator d degrees of freedom, is p.">
				<Param name="n" />
				<Param name="d" />
				<Param name="p" />
			</Overload>
		</KeyWord>
		<KeyWord name="FLOOR" func="yes">
			<Overload retVal="" descr="Greatest integer less than or equal to value.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="FNROOT" func="yes">
			<Overload retVal="" descr="Function root-finder (like the Solve app). Finds the value for variable at which an expression most nearly evaluates to zero. Uses guess as initial estimate.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="[guess]" />
				<Param name="[guess2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="FOR" />
		<KeyWord name="FP" func="yes">
			<Overload retVal="" descr="Returns the Fractional part of value.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="FREEZE" />
		<KeyWord name="FROM" />
		<KeyWord name="GETBASE" func="yes">
			<Overload retVal="" descr="Returns the base for the specified integer in base m, in whatever is the current default base. 0 = System, 1 = Binary, 2 = Octal, 3 = Decimal, 4 = Hexadecimal. &#x0a;The base marker m can be b (for binary), o (for octal), d (for decimal), or h (for hexadecimal). If m is omitted, the input integer is assumed to be in the default base.">
				<Param name="#integer[m]" />
			</Overload>
		</KeyWord>
		<KeyWord name="GETBITS" func="yes">
			<Overload retVal="" descr="Returns the number of bits used for encoding an integer. If not specified, then the value in the Integers field of Page 1 of Home Settings is used.">
				<Param name="#integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="GETKEY" />
		<KeyWord name="GETPIX" func="yes">
			<Overload retVal="" descr="Returns the color of the pixel of G with Cartesian coordinates (x, y).">
				<Param name="[G]" />
				<Param name="x" />
				<Param name="y" />
			</Overload>
		</KeyWord>
		<KeyWord name="GETPIX_P" func="yes">
			<Overload retVal="" descr="Returns the color of the pixel of G with pixel coordinates (x, y).">
				<Param name="[G]" />
				<Param name="x" />
				<Param name="y" />
			</Overload>
		</KeyWord>
		<KeyWord name="GF" func="yes">
			<Overload retVal="" descr="Creates a Galois Field of characteristic p with p^n elements.">
				<Param name="Integerp" />
				<Param name="Integern" />
			</Overload>
		</KeyWord>
		<KeyWord name="GROBH" func="yes">
			<Overload retVal="" descr="Returns the height of the graphic object G.">
				<Param name="G" />
			</Overload>
		</KeyWord>
		<KeyWord name="GROBH_P" func="yes">
			<Overload retVal="" descr="Returns the height of the graphic object G in pixels.">
				<Param name="G" />
			</Overload>
		</KeyWord>
		<KeyWord name="GROBW" func="yes">
			<Overload retVal="" descr="Returns the width of the graphic object G.">
				<Param name="G" />
			</Overload>
		</KeyWord>
		<KeyWord name="GROBW_P" func="yes">
			<Overload retVal="" descr="Returns the width of the graphic object G in pixels.">
				<Param name="G" />
			</Overload>
		</KeyWord>
		<KeyWord name="Gamma" func="yes">
			<Overload retVal="" descr="Returns the value of the gamma function (&#x0393;) for a real number. Gamma(n)=(n-1)! if n is an integer.">
				<Param name="Real" />
			</Overload>
		</KeyWord>
		<KeyWord name="HMS&#x2192;" func="yes">
			<Overload retVal="" descr="Converts a value expressed in sexagesimal format to decimal format.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="Heaviside" func="yes">
			<Overload retVal="" descr="Returns the value of the Heaviside function for a given real number. The Heaviside function is equal to 0 if x&lt;0 and 1 if x&#x2265;0.">
				<Param name="Real" />
			</Overload>
		</KeyWord>
		<KeyWord name="IDENMAT" func="yes">
			<Overload retVal="" descr="Creates a square matrix of dimension n x n whose diagonal elements are 1 and off- diagonal elements are zero.">
				<Param name="n" />
			</Overload>
		</KeyWord>
		<KeyWord name="IF" />
		<KeyWord name="IFERR" />
		<KeyWord name="IFTE" func="yes">
			<Overload retVal="" descr="If Expr evaluates true (1), evaluates TrueClause; if not, evaluates FalseClause. If Expr returns a list, then TrueClause and FalseClause each have to be either a single object, &#x0a;or a list of the same size as the result of Expr. &#x0a;The result will be a list of that size with elements picked from TrueClause and FalseClause according to the Boolean value of each element of the result of Expr.">
				<Param name="Expr" />
				<Param name="TrueClause" />
				<Param name="FalseClause" />
			</Overload>
		</KeyWord>
		<KeyWord name="IM" func="yes">
			<Overload retVal="" descr="Returns the imaginary part of a complex number.">
				<Param name="x+yi" />
			</Overload>
		</KeyWord>
		<KeyWord name="INPUT" func="yes">
			<Overload retVal="" descr="The simpler form of this command opens a dialog box with the given title and one field named label, displaying help at the bottom. The dialog box includes Cancel and OK menu keys. &#x0a;The user can enter a value in the labeled field. If the user presses the OK menu key, the variable var is updated with the entered value and 1 is returned. &#x0a;If the user presses the Cancel menu key, var is not updated and 0 is returned.">
				<Param name="var_name" />
				<Param name="real" />
				<Param name="[{pos}], [&#x201C;title&#x201D;]" />
				<Param name="[&#x201C;label&#x201D;]" />
				<Param name="[&#x201C;help&#x201D;]" />
				<Param name="[reset_value]" />
				<Param name="[initial_value]" />
			</Overload>
			<Overload retVal="" descr="The simpler form of this command opens a dialog box with the given title and one field named label, displaying help at the bottom. The dialog box includes Cancel and OK menu keys. &#x0a;The user can enter a value in the labeled field. If the user presses the OK menu key, the variable var is updated with the entered value and 1 is returned. &#x0a;If the user presses the Cancel menu key, var is not updated and 0 is returned.">
				<Param name="var_name" />
				<Param name="[allowed_types_matrix]" />
				<Param name="[{pos}], [&#x201C;title&#x201D;]" />
				<Param name="[&#x201C;label&#x201D;]" />
				<Param name="[&#x201C;help&#x201D;]" />
				<Param name="[reset_value]" />
				<Param name="[initial_value]" />
			</Overload>
			<Overload retVal="" descr="The simpler form of this command opens a dialog box with the given title and one field named label, displaying help at the bottom. The dialog box includes Cancel and OK menu keys. &#x0a;The user can enter a value in the labeled field. If the user presses the OK menu key, the variable var is updated with the entered value and 1 is returned. &#x0a;If the user presses the Cancel menu key, var is not updated and 0 is returned.">
				<Param name="var_name" />
				<Param name="{choose_items}" />
				<Param name="[{pos}], [&#x201C;title&#x201D;]" />
				<Param name="[&#x201C;label&#x201D;]" />
				<Param name="[&#x201C;help&#x201D;]" />
				<Param name="[reset_value]" />
				<Param name="[initial_value]" />
			</Overload>
			<Overload retVal="" descr="The simpler form of this command opens a dialog box with the given title and one field named label, displaying help at the bottom. The dialog box includes Cancel and OK menu keys. &#x0a;The user can enter a value in the labeled field. If the user presses the OK menu key, the variable var is updated with the entered value and 1 is returned. &#x0a;If the user presses the Cancel menu key, var is not updated and 0 is returned.">
				<Param name="{var_name" />
				<Param name="real" />
				<Param name="[{pos}]}, [&#x201C;titles&#x201D;]" />
				<Param name="[{&#x201C;labels&#x201D;}]" />
				<Param name="[{&#x201C;helps&#x201D;}]" />
				<Param name="[{reset_values}]" />
				<Param name="[{initial_values}]" />
			</Overload>
			<Overload retVal="" descr="The simpler form of this command opens a dialog box with the given title and one field named label, displaying help at the bottom. The dialog box includes Cancel and OK menu keys. &#x0a;The user can enter a value in the labeled field. If the user presses the OK menu key, the variable var is updated with the entered value and 1 is returned. &#x0a;If the user presses the Cancel menu key, var is not updated and 0 is returned.">
				<Param name="{var_name" />
				<Param name="[allowed_types_matrix]" />
				<Param name="[{pos}]}, [{&#x201C;titles&#x201D;}]" />
				<Param name="[{&#x201C;labels&#x201D;}]" />
				<Param name="[{&#x201C;helps&#x201D;}]" />
				<Param name="[{reset_values}]" />
				<Param name="[{initial_values}]" />
			</Overload>
			<Overload retVal="" descr="The simpler form of this command opens a dialog box with the given title and one field named label, displaying help at the bottom. The dialog box includes Cancel and OK menu keys. &#x0a;The user can enter a value in the labeled field. If the user presses the OK menu key, the variable var is updated with the entered value and 1 is returned. &#x0a;If the user presses the Cancel menu key, var is not updated and 0 is returned.">
				<Param name="{var_name" />
				<Param name="{choose_items}" />
				<Param name="[{pos}]}, [&#x201C;titles&#x201D;]" />
				<Param name="[{&#x201C;labels&#x201D;}]" />
				<Param name="[{&#x201C;helps&#x201D;}]" />
				<Param name="[{reset_values}]" />
				<Param name="[{initial_values}]" />
			</Overload>
		</KeyWord>
		<KeyWord name="INSTRING" func="yes">
			<Overload retVal="" descr="Returns the index of the first occurrence of String2 in String1. Returns 0 if String2 is not present in String1. Note that the first character in a string is position 1.">
				<Param name="String1" />
				<Param name="String2" />
			</Overload>
		</KeyWord>
		<KeyWord name="INVERSE" func="yes">
			<Overload retVal="" descr="Inverts a square matrix. If Complex mode is on, the matrix may contain complex elements.">
				<Param name="-1" />
			</Overload>
		</KeyWord>
		<KeyWord name="INVERT" func="yes">
			<Overload retVal="" descr="Inverts the rectangle on G defined by the diagonal points (x1, y1) and (x2, y2). The effect is reverse video. The following values are optional and their defaults are listed: x1, y1=top left corner of G; x2, y2=bottom right corner of G. If only one (x,y) pair is specified, it refers to the top left corner of G.">
				<Param name="[G" />
				<Param name="x1" />
				<Param name="y1" />
				<Param name="x2" />
				<Param name="y2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="INVERT_P" func="yes">
			<Overload retVal="" descr="Inverts the rectangle on G defined by the diagonal points (x1, y1) and (x2, y2). The effect is reverse video. The following values are optional and their defaults are listed: x1, y1=top left corner of G; x2, y2=bottom right corner of G. If only one (x,y) pair is specified, it refers to the top left corner of G.">
				<Param name="[G" />
				<Param name="x1" />
				<Param name="y1" />
				<Param name="x2" />
				<Param name="y2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="IP" func="yes">
			<Overload retVal="" descr="Returns the Integer part of value.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="ISKEYDOWN" func="yes">
			<Overload retVal="" descr="Returns true (non-zero) if the key whose KeyIdentifier is provided is currently pressed, and false (0) if it is not.">
				<Param name="KeyIdentifier" />
			</Overload>
		</KeyWord>
		<KeyWord name="ITERATE" func="yes">
			<Overload retVal="" descr="For times, recursively evaluates expr in terms of var, beginning with var = ivalue.">
				<Param name="expr" />
				<Param name="var" />
				<Param name="ivalue" />
				<Param name="times" />
			</Overload>
		</KeyWord>
		<KeyWord name="Image" func="yes">
			<Overload retVal="" descr="Image of a linear application of a matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="JordanBlock" func="yes">
			<Overload retVal="" descr="Returns a square n x n matrix with Expr on the diagonal, 1 above and 0 everywhere else.">
				<Param name="Expr" />
				<Param name="n" />
			</Overload>
		</KeyWord>
		<KeyWord name="KILL" />
		<KeyWord name="LEFT" func="yes">
			<Overload retVal="" descr="Given a string and an integer n, return the first n characters of the string. If n &#x2265; DIM(str) or n &#x2264; 0, returns the entire string.">
				<Param name="Expr1=Expr2" />
			</Overload>
			<Overload retVal="" descr="Given a string and an integer n, return the first n characters of the string. If n &#x2265; DIM(str) or n &#x2264; 0, returns the entire string.">
				<Param name="Real1..Real2" />
			</Overload>
			<Overload retVal="" descr="Given a string and an integer n, return the first n characters of the string. If n &#x2265; DIM(str) or n &#x2264; 0, returns the entire string.">
				<Param name="String" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="LINE" func="yes">
			<Overload retVal="" descr="Draws a line in the Plot view of the Geometry app or returns the equation of a line in CAS view. &#x0a;The arguments can be two points, a linear expression of the form a*x+b*y+c, or a point and a slope.">
				<Param name="a*x+b*y+c" />
			</Overload>
			<Overload retVal="" descr="Draws a line in the Plot view of the Geometry app or returns the equation of a line in CAS view. &#x0a;The arguments can be two points, a linear expression of the form a*x+b*y+c, or a point and a slope.">
				<Param name="Point1" />
				<Param name="Point2" />
			</Overload>
			<Overload retVal="" descr="Draws a line in the Plot view of the Geometry app or returns the equation of a line in CAS view. &#x0a;The arguments can be two points, a linear expression of the form a*x+b*y+c, or a point and a slope.">
				<Param name="point1" />
				<Param name="slope=realm" />
			</Overload>
			<Overload retVal="" descr="Draws a line in the Plot view of the Geometry app or returns the equation of a line in CAS view. &#x0a;The arguments can be two points, a linear expression of the form a*x+b*y+c, or a point and a slope.">
				<Param name="[G]" />
				<Param name="x1" />
				<Param name="y1" />
				<Param name="x2" />
				<Param name="y2" />
				<Param name="[color]" />
			</Overload>
			<Overload retVal="" descr="Draws a line in the Plot view of the Geometry app or returns the equation of a line in CAS view. &#x0a;The arguments can be two points, a linear expression of the form a*x+b*y+c, or a point and a slope.">
				<Param name="[G], points_definition" />
				<Param name="lines_definitions" />
				<Param name="rotation_matrix or {rotation_matrix or -1" />
				<Param name="[&quot;N&quot;]" />
				<Param name="[{eye_x" />
				<Param name="eye_y" />
				<Param name="eye_z} or -1]" />
				<Param name="[{xmin3D" />
				<Param name="xmax3D" />
				<Param name="ymin3D" />
				<Param name="ymax3D" />
				<Param name="zmin3D" />
				<Param name="zmax3D}]}" />
				<Param name="[zstring]" />
			</Overload>
			<Overload retVal="" descr="Draws a line in the Plot view of the Geometry app or returns the equation of a line in CAS view. &#x0a;The arguments can be two points, a linear expression of the form a*x+b*y+c, or a point and a slope.">
				<Param name="[G], pre_rotated_points" />
				<Param name="line_definitions" />
				<Param name="[zstring]" />
			</Overload>
		</KeyWord>
		<KeyWord name="LINE_P" func="yes">
			<Overload retVal="" descr="The basic form of LINE_P draws one line between specified coordinates in the graphic using the specified color. &#x0a;The advanced form of LINE_P allows the rendering of multiple lines at a time with a potential 3D transformation of the points that define the line. &#x0a;This is mostly used if you have a set of vertices and lines and want to display them all at once (faster). points_definition is either a list or a matrix of point definitions. &#x0a;Each point is defined by 2 to 4 numbers: x, y, z and color. A valid point definition can have multiple forms. Here are some examples: [x, y, z, c], {x, y, z, c}, {x, y, #c}, {(x, y), c}, (x,y).">
				<Param name="[G]" />
				<Param name="points_definition" />
				<Param name="lines_definitions" />
				<Param name="rotation_matrix or {rotation_matrix or - 1" />
				<Param name="[&quot;N&quot;]" />
				<Param name="[{eye_x, eye_y, eye_z} or -1]" />
				<Param name="[{xmin3D, xmax3D, ymin3D, ymax3D, zmin3D, zmax3D}]}" />
				<Param name="[zstring]" />
			</Overload>
			<Overload retVal="" descr="The basic form of LINE_P draws one line between specified coordinates in the graphic using the specified color. &#x0a;The advanced form of LINE_P allows the rendering of multiple lines at a time with a potential 3D transformation of the points that define the line. &#x0a;This is mostly used if you have a set of vertices and lines and want to display them all at once (faster). points_definition is either a list or a matrix of point definitions. &#x0a;Each point is defined by 2 to 4 numbers: x, y, z and color. A valid point definition can have multiple forms. Here are some examples: [x, y, z, c], {x, y, z, c}, {x, y, #c}, {(x, y), c}, (x,y).">
				<Param name="[G]" />
				<Param name="pre_rotated_points" />
				<Param name="line_definitions" />
				<Param name="[zstring]" />
			</Overload>
			<Overload retVal="" descr="The basic form of LINE_P draws one line between specified coordinates in the graphic using the specified color. &#x0a;The advanced form of LINE_P allows the rendering of multiple lines at a time with a potential 3D transformation of the points that define the line. &#x0a;This is mostly used if you have a set of vertices and lines and want to display them all at once (faster). points_definition is either a list or a matrix of point definitions. Each point is defined by 2 to 4 numbers: x, y, z and color. A valid point definition can have multiple forms. Here are some examples: [x, y, z, c], {x, y, z, c}, {x, y, #c}, {(x, y), c}, (x,y).">
				<Param name="[G]" />
				<Param name="x1" />
				<Param name="y1" />
				<Param name="x2" />
				<Param name="y2" />
				<Param name="[color]" />
			</Overload>
		</KeyWord>
		<KeyWord name="LN" func="yes">
			<Overload retVal="" descr="Returns the natural logarithm of Value. The natural logarithm is the logarithm to the base e, Euler's number.">
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="LNP1" func="yes">
			<Overload retVal="" descr="This is more accurate than the natural logarithm function for values close to zero.">
				<Param name="value" />
			</Overload>
		</KeyWord>
		<KeyWord name="LOCAL" />
		<KeyWord name="LOG" func="yes">
			<Overload retVal="" descr="General logarithmic function. Returns the logarithm of Value in Base. By default, Base=10.">
				<Param name="Value" />
				<Param name="[Base]" />
			</Overload>
		</KeyWord>
		<KeyWord name="LOWER" func="yes">
			<Overload retVal="" descr="Returns string with uppercase characters converted to lowercase.">
				<Param name="string" />
			</Overload>
		</KeyWord>
		<KeyWord name="LQ" func="yes">
			<Overload retVal="" descr="Factorizes a m &#x00D7; n matrix into three matrices: L, Q, and P, where L is an m &#x00D7; n lower trapezoidal, Q is an n &#x00D7; n orthogonal, and P is an m &#x00D7; m permutation; and P*A=L*Q.">
				<Param name="matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="LSQ" func="yes">
			<Overload retVal="" descr="Returns the minimum norm least squares matrix (or vector) corresponding to the system matrix1*X=matrix2">
				<Param name="matrix1" />
				<Param name="matrix2" />
			</Overload>
		</KeyWord>
		<KeyWord name="LU" func="yes">
			<Overload retVal="" descr="Factorizes a square matrix into three matrices L, U, and P, where L is a lowertriangular, U is an uppertriangular, and P is the permutation; and P*A=L*U.">
				<Param name="matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="LineHorz" func="yes">
			<Overload retVal="" descr="Used in the Symbolic view of the Geometry app. Given an expression that evaluates to a real number a, draws the horizontal line y=a.">
				<Param name="Exp" />
			</Overload>
			<Overload retVal="" descr="Used in the Symbolic view of the Geometry app. Given a real number a, draws the horizontal line y=a.">
				<Param name="Real" />
			</Overload>
		</KeyWord>
		<KeyWord name="LineTan" func="yes">
			<Overload retVal="" descr="Draws the tangent to y=f(Var) at Var=Value.">
				<Param name="f(x)" />
				<Param name="[Var]" />
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="LineVert" func="yes">
			<Overload retVal="" descr="Used in the Symbolic view of the Geometry app. Given an expression that evaluates to a real number a, draws the vertical line x=a.">
				<Param name="Expr" />
			</Overload>
			<Overload retVal="" descr="Used in the Symbolic view of the Geometry app. Given a real number a, draws the vertical line x=a.">
				<Param name="Real" />
			</Overload>
		</KeyWord>
		<KeyWord name="MAKELIST" func="yes">
			<Overload retVal="" descr="Calculates a sequence of elements for a new list. Evaluates expression, incrementing variable from begin to end values, using increment steps (default is 1).">
				<Param name="expression" />
				<Param name="variable" />
				<Param name="begin" />
				<Param name="end" />
				<Param name="[increment]" />
			</Overload>
		</KeyWord>
		<KeyWord name="MAKEMAT" func="yes">
			<Overload retVal="" descr="Creates a matrix of dimension Rows &#x00D7; Columns, using Expr to calculate each element. &#x0a;If Expr contains the variables I and J, then the calculation for each element substitutes the current row number for I and the current column number for J, using the number of Elements.">
				<Param name="Expr" />
				<Param name="Elements" />
			</Overload>
			<Overload retVal="" descr="Creates a matrix of dimension Rows &#x00D7; Columns, using Expr to calculate each element. &#x0a;If Expr contains the variables I and J, then the calculation for each element substitutes the current row number for I and the current column number for J, using the number of rows and columns.">
				<Param name="Expr" />
				<Param name="Rows" />
				<Param name="Columns" />
			</Overload>
		</KeyWord>
		<KeyWord name="MANT" func="yes">
			<Overload retVal="" descr="Returns the significant digits of Value.">
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="MAX" func="yes">
			<Overload retVal="" descr="Returns the greatest value of a list.">
				<Param name="list" />
			</Overload>
			<Overload retVal="" descr="Returns the greatest of the values given.">
				<Param name="value1" />
				<Param name="[value2]" />
				<Param name="[..value16]" />
			</Overload>
		</KeyWord>
		<KeyWord name="MAXREAL" />
		<KeyWord name="MEMORY" func="yes">
			<Overload retVal="" descr="Returns a list containing integers representing memory and storage space.">
				<Param name="" />
			</Overload>
			<Overload retVal="" descr="Returns a list containing integers representing memory and storage space, or the individual integer at position n.">
				<Param name="n" />
			</Overload>
		</KeyWord>
		<KeyWord name="MID" func="yes">
			<Overload retVal="" descr="Extracts n characters from String starting at Position. If n is not specified, then MID extracts the remainder of String from Position.">
				<Param name="String" />
				<Param name="Position" />
				<Param name="[n]" />
			</Overload>
		</KeyWord>
		<KeyWord name="MIN" func="yes">
			<Overload retVal="" descr="Returns the least value of a list.">
				<Param name="list" />
			</Overload>
			<Overload retVal="" descr="Returns the least of the values given.">
				<Param name="value1" />
				<Param name="[value2]" />
				<Param name="[..value16]" />
			</Overload>
		</KeyWord>
		<KeyWord name="MINREAL" />
		<KeyWord name="MKSA" func="yes">
			<Overload retVal="" descr="Converts the measurement Value_Unit to its corresponding value and unit in Unit's MKSA equivalent. MKSA stands for the Meter-Kilogram-Second-Ampere system.">
				<Param name="Value_Unit" />
			</Overload>
		</KeyWord>
		<KeyWord name="MOD" />
		<KeyWord name="MOUSE" func="yes">
			<Overload retVal="" descr="Returns two lists describing the current location of each potential pointer (or empty lists if the pointers are not used). &#x0a;The output is {x , y, original z, original y, type} where type is 0 (for new), 1 (for completed), 2 (for drag), 3 (for stretch), 4 (for rotate), and 5 (for long click). &#x0a;The optional parameter index is the nth element that would have been returned&#x2014;x, y, original x, etc.&#x2014;had the parameter been omitted (or &#x2013;1 if no pointer activity had occurred).">
				<Param name="[index]" />
			</Overload>
		</KeyWord>
		<KeyWord name="MSGBOX" func="yes">
			<Overload retVal="" descr="Displays a message box with the value of expr. If OK_Cancel is true, displays OK and CANCEL menu keys, otherwise only displays the OK menu key. &#x0a;Default value for OK_Cancel is false. Returns true (non-zero) if the user presses OK, false (0) if the user presses CANCEL.">
				<Param name="expr" />
				<Param name="[OK_Cancel]" />
			</Overload>
			<Overload retVal="" descr="Displays a message box with the string. If OK_Cancel is true, displays OK and CANCEL menu keys, otherwise only displays the OK menu key. &#x0a;Default value for OK_Cancel is false. Returns true (non-zero) if the user presses OK, false (0) if the user presses CANCEL.">
				<Param name="string" />
				<Param name="[OK_Cancel]" />
			</Overload>
		</KeyWord>
		<KeyWord name="NORMALD" func="yes">
			<Overload retVal="" descr="Normal probability density function. Computes the probability density at the value x, given the mean, &#x03BC;, and standard deviation, &#x03C3;, of a normal distribution. &#x0a;With one argument, x, it returns the probability density for the standard normal distribution at x, assuming a mean of zero and standard deviation of 1.">
				<Param name="[&#x03BC;, &#x03C3;]" />
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="NORMALD_CDF" func="yes">
			<Overload retVal="" descr="Cumulative normal distribution function. With three values (mu, sigma, and x), returns the lower-tail probability of the normal probability density function for the value x, given the mean and standard deviation of a normal distribution. &#x0a;With the optional fourth value x2, returns the area under the normal probability density function between the two x-values. &#x0a;With one argument x, returns the lower-tail probability of the standard normal probability density function for the value x, assuming a mean of zero and standard deviation of 1.">
				<Param name="[mu, sigma]" />
				<Param name="x" />
				<Param name="[x2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="NORMALD_ICDF" func="yes">
			<Overload retVal="" descr="Inverse cumulative normal distribution function. Returns the cumulative normal distribution x-value associated with the lower-tail probability p, given the mean &#x03BC;, and standard deviation &#x03C3;, of a normal distribution. &#x0a;With one argument, p, assumes a mean of 0 and a standard deviation of 1.">
				<Param name="[&#x03BC;, &#x03C3;]" />
				<Param name="p" />
			</Overload>
		</KeyWord>
		<KeyWord name="NOT" />
		<KeyWord name="OR" />
		<KeyWord name="PIECEWISE" func="yes">
			<Overload retVal="" descr="Used with Home settings Entry set to Algebraic to enter a piecewise-defined function in the Function app Symbolic view (among other uses). &#x0a;Takes as arguments pairs, each of which consists of a condition that defines a sub-function domain and an expression that defines the sub-function. &#x0a;Each of these pairs defines a sub-function of the piecewise function and the domain over which it is active. &#x0a;If used with Home settings Entry set to Textbook or if accessed via the Template menu, then the syntax varies slightly and is restricted to two pieces.">
				<Param name="test1" />
				<Param name="case1" />
				<Param name="...[" />
				<Param name="test8]" />
				<Param name="case8" />
			</Overload>
		</KeyWord>
		<KeyWord name="PIXOFF" func="yes">
			<Overload retVal="" descr="Sets the color of the pixel of GROB G with Cartesian coordinates (x, y) to white.">
				<Param name="[G]" />
				<Param name="x" />
				<Param name="y" />
			</Overload>
		</KeyWord>
		<KeyWord name="PIXOFF_P" func="yes">
			<Overload retVal="" descr="Sets the color of the pixel of GROB G with pixel coordinates (x, y) to white.">
				<Param name="[G]" />
				<Param name="x" />
				<Param name="y" />
			</Overload>
		</KeyWord>
		<KeyWord name="PIXON" func="yes">
			<Overload retVal="" descr="Sets the color of the pixel of GROB G with Cartesian coordinates (x, y).">
				<Param name="[G]" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[color]" />
			</Overload>
		</KeyWord>
		<KeyWord name="PIXON_P" func="yes">
			<Overload retVal="" descr="Sets the color of the pixel of GROB G with pixel coordinates (x, y).">
				<Param name="[G]" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[color]" />
			</Overload>
		</KeyWord>
		<KeyWord name="POLYCOEF" func="yes">
			<Overload retVal="" descr="Returns the coefficients of the polynomial with the roots specified in a list.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Returns the coefficients of the polynomial with the roots specified in a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="POLYEVAL" func="yes">
			<Overload retVal="" descr="Given a list of coefficients and a value, evaluates the polynomial given by those coefficients at the given value.">
				<Param name="List" />
				<Param name="Value" />
			</Overload>
			<Overload retVal="" descr="Given a vector of coefficients and a value, evaluates the polynomial given by those coefficients at the given value.">
				<Param name="Vector" />
				<Param name="Real" />
			</Overload>
			<Overload retVal="" descr="Given a vector of coefficients and a value, evaluates the polynomial given by those coefficients at the given value.">
				<Param name="Vector" />
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="POLYROOT" func="yes">
			<Overload retVal="" descr="Returns the zeros of the polynomial given as argument as a symbolic expression.">
				<Param name="Poly" />
			</Overload>
			<Overload retVal="" descr="Returns the zeros of the polynomial given as argument as a vector of coefficients.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="PRINT" func="yes">
			<Overload retVal="" descr="Prints to the terminal. The terminal is a program text output viewing mechanism which is displayed only when PRINT commands are executed. &#x0a;When visible, you can use the up/down keys to view the text, Backspace to erase the text and any other key to hide the terminal. &#x0a;You can show the terminal at anytime using the ON+T combination (press and hold the On key, press the T key, then release both keys). &#x0a;Pressing On stops the interaction with the terminal. PRINT with no argument clears the terminal.">
				<Param name="" />
			</Overload>
			<Overload retVal="" descr="Prints the result of expr to the terminal. The terminal is a program text output viewing mechanism which is displayed only when PRINT commands are executed. &#x0a;When visible, you can use the up/down keys to view the text, Backspace to erase the text and any other key to hide the terminal. &#x0a;You can show the terminal at anytime using the ON+T combination (press and hold the On key, press the T key, then release both keys). &#x0a;Pressing On stops the interaction with the terminal. PRINT with no argument clears the terminal.">
				<Param name="expr" />
			</Overload>
			<Overload retVal="" descr="Prints a string to the terminal. The terminal is a program text output viewing mechanism which is displayed only when PRINT commands are executed. &#x0a;When visible, you can use the up/down keys to view the text, Backspace to erase the text and any other key to hide the terminal. &#x0a;You can show the terminal at anytime using the ON+T combination (press and hold the On key, press the T key, then release both keys). &#x0a;Pressing On stops the interaction with the terminal. PRINT with no argument clears the terminal.">
				<Param name="string" />
			</Overload>
		</KeyWord>
		<KeyWord name="QUOTE" func="yes">
			<Overload retVal="" descr="Returns the expression unchanged and un-evaluated. This function is used mainly with Sto▶ in order to store a function in a function variable.">
				<Param name="expression" />
			</Overload>
		</KeyWord>
		<KeyWord name="R&#x2192;B" func="yes">
			<Overload retVal="" descr="Converts a decimal integer (base 10) to an integer.">
				<Param name="Real" />
			</Overload>
			<Overload retVal="" descr="Converts a decimal integer (base 10) to an integer. 1 &#x2264; bits &#x2264; 64 (Unsigned integer). -1 &#x2265; bits &#x2265; -63 (Signed integer).">
				<Param name="Real" />
				<Param name="bits" />
			</Overload>
			<Overload retVal="" descr="Converts a decimal integer (base 10) to an integer. 1 &#x2264; bits &#x2264; 64 (Unsigned integer). -1 &#x2265; bits &#x2265; -63 (Signed integer). base = 0 System, base = 1 Binary, base = 2 Octal, base = 3 Decimal, base = 4 Hexadecimal.">
				<Param name="Real" />
				<Param name="bits" />
				<Param name="base" />
			</Overload>
		</KeyWord>
		<KeyWord name="RECT" func="yes">
			<Overload retVal="" descr="Draws a rectangle on G, with diagonal defined by points (x1,y1) and (x2,y2), using edgecolor for the perimeter and fillcolor for the inside. &#x0a;The following values are optional and their defaults are listed: x1, y1=top left corner of G, x2, y2=bottom right corner of G, edgecolor=white, fillcolor=edgecolor.">
				<Param name="[G]" />
				<Param name="[x1, y1]" />
				<Param name="[x2, y2]" />
				<Param name="[edgecolor]" />
				<Param name="[fillcolor]" />
			</Overload>
		</KeyWord>
		<KeyWord name="RECT_P" func="yes">
			<Overload retVal="" descr="Draws a rectangle on G, with diagonal defined by points (x1,y1) and (x2,y2), using edgeColor for the perimeter and fillColor for the inside. &#x0a;The following values are optional and their defaults are listed: x1, y1=top left corner of G; x2, y2=bottom right corner of G; edgeColor=white; fillColor=edgeColor.">
				<Param name="[G]" />
				<Param name="[x1, y1]" />
				<Param name="[x2, y2]" />
				<Param name="[edgeColor]" />
				<Param name="[fillColor]" />
			</Overload>
		</KeyWord>
		<KeyWord name="REDIM" func="yes">
			<Overload retVal="" descr="Redimensions the specified matrix or vector to size. For a matrix, size is a list of two integers {n1, n2}. For a vector, size is a list containing one integer {n}. &#x0a;Existing values in the matrix are preserved. Fill values will be zeros.">
				<Param name="matrixname" />
				<Param name="size" />
			</Overload>
		</KeyWord>
		<KeyWord name="RETURN" />
		<KeyWord name="RIGHT" func="yes">
			<Overload retVal="" descr="Returns the last n characters of the string.">
				<Param name="String" />
				<Param name="n" />
			</Overload>
		</KeyWord>
		<KeyWord name="ROTATE" func="yes">
			<Overload retVal="" descr="If n is not negative, takes the first n characters of String and put them on the right of String. If n is negative, takes the last n characters and put them on the left of String. &#x0a;If ABS(n)&gt;dim(string), returns String.">
				<Param name="String" />
				<Param name="n" />
			</Overload>
		</KeyWord>
		<KeyWord name="ROUND" func="yes">
			<Overload retVal="" descr="Rounds value to system display settings. If optional places is given, rounds value to places decimal places. If places is negative, rounds to significant digits instead.">
				<Param name="value" />
				<Param name="[places]" />
			</Overload>
		</KeyWord>
		<KeyWord name="SCALE" func="yes">
			<Overload retVal="" descr="Multiplies the specified row_number of the specified matrix by value.">
				<Param name="matrixname" />
				<Param name="value" />
				<Param name="row_number" />
			</Overload>
		</KeyWord>
		<KeyWord name="SCALEADD" func="yes">
			<Overload retVal="" descr="Multiplies the specified row1 of the matrix name by value, then adds this result to the second specified row2 of the matrix matrixname.">
				<Param name="matrixname" />
				<Param name="value" />
				<Param name="row1" />
				<Param name="row2" />
			</Overload>
		</KeyWord>
		<KeyWord name="SERIAL" />
		<KeyWord name="SETBASE" func="yes">
			<Overload retVal="" descr="Displays integer expressed in base m in whatever base is indicated by c. Base marker m can be b (for binary), d (for decimal), o (for octal), d (for decimal), or h (for hexadecimal). &#x0a;If m is omitted, the input is assumed to be in the default base. c = 0 System, c = 1 Binary, c = 2 Octal, c = 3 Decimal, c = 4 Hexadecimal. If c is omitted, the output is displayed in the default base.">
				<Param name="#integer[m]" />
				<Param name="[c]" />
			</Overload>
		</KeyWord>
		<KeyWord name="SETBITS" func="yes">
			<Overload retVal="" descr="Sets the number of bits to represent integer. Valid values are in the range &#x2013;63 to 64. If base marker m or bits is omitted, the default value is used.">
				<Param name="#integer[m]" />
				<Param name="[bits]" />
			</Overload>
		</KeyWord>
		<KeyWord name="SIN" func="yes">
			<Overload retVal="" descr="Returns the sine of Value. Value is interpreted as either degrees or radians, depending on the setting of Angle Measure in Home Settings, CAS Settings, or Symbolic Setup.">
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="SIZE" func="yes">
			<Overload retVal="" descr="Size of a list or matrix. Returns the size of a list or the dimensions of matrix as a list: {Rows, Columns}.">
				<Param name="matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="STARTVIEW" func="yes">
			<Overload retVal="" descr="Starts a view of the current app. Redraw, is optional; if Redraw, is true (non 0), it will force a refresh for the view. The view numbers are as follows: &#x0a;0=Symbolic, 1=Plot, 2=Numeric, 3=Symbolic Setup, 4=Plot Setup, 5=Numeric Setup, 6=App Info, 7=Views key, 8=First special view (Split Screen Plot Detail), &#x0a;9=Second special view (Split Screen Plot Table), 10=Third special view (Autoscale), 11=Fourth special view (Decimal), 12=Fifth special view (Integer), &#x0a;13=Sixth special view (Trig), -1=Home Screen, -2=Modes, -3=Memory Manager, -4=App Library, -5=Matrix Catalog, -6=List Catalog, -7=Program Catalog, -8=Note Catalog.">
				<Param name="ViewNumber" />
				<Param name="[Redraw]" />
			</Overload>
		</KeyWord>
		<KeyWord name="STRING" func="yes">
			<Overload retVal="" descr="Evaluates Expression and returns the result as a string. The extra parameters specify how numbers are displayed. If Mode is specified, it is: &#x0a;0: Use current setting, 1: Standard, 2: Fixed, 3: Scientific, 4: Engineering, 5: Floating, 6: Rounded. Add 7 to this value to specify proper fraction mode and 14 for mixed fraction mode.">
				<Param name="Expression" />
				<Param name="[Mode]" />
				<Param name="[Precision]" />
				<Param name="[Separator or {Separator" />
				<Param name="[&quot;[DecimalPoint[Exponent[NegativeSign]]]&quot;]" />
				<Param name="[DotZero]}]" />
				<Param name="[SizeLimit or {SizeLimit" />
				<Param name="[FontSize]" />
				<Param name="[Bold]" />
				<Param name="[Italic]" />
				<Param name="[Monospaced]}])    " />
			</Overload>
		</KeyWord>
		<KeyWord name="STRINGFROMID" func="yes">
			<Overload retVal="" descr="Returns the built-in string associated with the ID of the current language.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="SUB" func="yes">
			<Overload retVal="" descr="Extracts a portion, of a list or matrix. For a matrix, start and end are two lists of two numbers ({row, col}) specifying the top left and bottom right of the portion to extract. &#x0a;For a vector or list, start and end are two numbers specifying the indexes of the first and last objects of the portion to extract.">
				<Param name="object" />
				<Param name="start" />
				<Param name="end" />
			</Overload>
		</KeyWord>
		<KeyWord name="SUBGROB" func="yes">
			<Overload retVal="" descr="Sets graphic trgtG to be a copy of the area of srcG between points (x1,y1) and (x2,y2). If both (x1, y1) and (x2, y2) are not specified, then the entire graphic srcG is used. &#x0a;If (x1, y1) is not specified, then the top left corner of srcG is used; if (x2, y2) is not specified, then the bottom right corner of srcG is used.">
				<Param name="srcG" />
				<Param name="[x1" />
				<Param name="y1]" />
				<Param name="[x2" />
				<Param name="y2]" />
				<Param name="trgtG" />
			</Overload>
		</KeyWord>
		<KeyWord name="SUBGROB_P" func="yes">
			<Overload retVal="" descr="Sets graphic trgtG to be a copy of the area of srcG between points (x1,y1) and (x2,y2). If both (x1, y1) and (x2, y2) are not specified, then the entire graphic srcG is used. &#x0a;If (x1, y1) is not specified, then the top left corner of srcG is used; if (x2, y2) is not specified, then the bottom right corner of srcG is used. &#x0a;trgtGRB can be any of the graphic variables except G0. SUBGROB_P(G1, G4) will copy G1 in G4.">
				<Param name="srcG" />
				<Param name="[x1" />
				<Param name="y1]" />
				<Param name="[x2" />
				<Param name="y2]" />
				<Param name="trgtG" />
			</Overload>
		</KeyWord>
		<KeyWord name="SVD" func="yes">
			<Overload retVal="" descr="Factorizes an m &#x00D7; n matrix into two matrices and a vector: {[[m &#x00D7; m orthogonal]], [[m x 1 vector of singular values]],[[n &#x00D7; n orthogonal]]}.">
				<Param name="Mtrx(A)" />
			</Overload>
		</KeyWord>
		<KeyWord name="SWAPCOL" func="yes">
			<Overload retVal="" descr="Exchanges column1 and column2 in the specified matrix matrixname.">
				<Param name="matrixname" />
				<Param name="column1" />
				<Param name="column2" />
			</Overload>
		</KeyWord>
		<KeyWord name="SWAPROW" func="yes">
			<Overload retVal="" descr="Exchanges row1 and row2 in the specified matrix matrixname.">
				<Param name="matrixname" />
				<Param name="row1" />
				<Param name="row2" />
			</Overload>
		</KeyWord>
		<KeyWord name="Si" func="yes">
			<Overload retVal="" descr="Returns the sine integral of an expression, int(sin(t)/t,t=0..x)">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="TEVAL" func="yes">
			<Overload retVal="" descr="Returns the time it takes to evaluate the parameter.">
				<Param name="Param" />
			</Overload>
		</KeyWord>
		<KeyWord name="TEXTOUT" func="yes">
			<Overload retVal="" descr="Draws text on graphic G at position (x, y) using font and textColor. Paints the background before drawing the text using color backgroundColor. &#x0a;If width is specified, does not draw text more than width pixels wide. If backgroundColor is not specified, the background is not erased. &#x0a;The sizes for font are: 0=current font (default), 1=font 10, 2=font 12 (Small), 3=font 14 (Medium), 4=font 16 (Large), 5=font 18, 6=font 20, 7=font 22. Returns the X (in pixels, not Cartesian) coordinate at which the next character of the string should be drawn if the string had more characters.">
				<Param name="text" />
				<Param name="[G]" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[font]" />
				<Param name="[textColor]" />
				<Param name="[width]" />
				<Param name="[backgroundColor]" />
			</Overload>
		</KeyWord>
		<KeyWord name="TEXTOUT_P" func="yes">
			<Overload retVal="" descr="Draws text on graphic G at position (x, y) using font and textColor. Paints the background before drawing the text using color backgroundColor. &#x0a;If width is specified, does not draw text more than width pixels wide. If backgroundColor is not specified, the background is not erased. &#x0a;The sizes for font are: 0=current font (default), 1=font 10, 2=font 12 (Small), 3=font 14 (Medium), 4=font 16 (Large), 5=font 18, 6=font 20, 7=font 22">
				<Param name="text" />
				<Param name="[G]" />
				<Param name="x" />
				<Param name="y" />
				<Param name="[font]" />
				<Param name="[textColor]" />
				<Param name="[width]" />
				<Param name="[backgroundColor]" />
			</Overload>
		</KeyWord>
		<KeyWord name="THEN" />
		<KeyWord name="TICKS" func="yes">
			<Overload retVal="" descr="Returns the internal millisecond clock value.">
				<Param name="" />
			</Overload>
		</KeyWord>
		<KeyWord name="TO" />
		<KeyWord name="TRIANGLE_P" func="yes">
			<Overload retVal="" descr="The basic form of TRIANGLE_P draws one triangle between specified pixel coordinates in the graphic using the specified color and transparency (0 &#x2264; Alpha &#x2264; 255). &#x0a;If 3 colors are specified, blends the colors in between the vertexes.">
				<Param name="[G]" />
			</Overload>
			<Overload retVal="" descr="The advanced form of TRIANGLE_P allows the rendering of multiple triangles at a time with a potential 3D transformation of the triangles vertices. &#x0a;This is mostly used if you have a set of vertices and triangles and want to display them all at once (faster). points_definition is either a list or a matrix of point definition. &#x0a;Each point is defined by 2 to 4 numbers: x, y, z and color. A valid point definition can have multiple forms. Here are a couple of examples: [x, y, z, c], {x, y, z, c}, {x, y, #c}, {(x, y), c}, (x,y).">
				<Param name="[G]" />
				<Param name="points_definition" />
				<Param name="triangle_definitions" />
				<Param name="rotation_matrix or {rotation_matrix or -1" />
				<Param name="[&quot;N&quot;]" />
				<Param name="[{eye_x" />
				<Param name="eye_y" />
				<Param name="eye_z} or -1]" />
				<Param name="[{xmin3D" />
				<Param name="xmax3D" />
				<Param name="ymin3D" />
				<Param name="ymax3D" />
				<Param name="zmin3D" />
				<Param name="zmax3D}]}" />
				<Param name="[zstring]" />
			</Overload>
			<Overload retVal="" descr="The advanced form of TRIANGLE_P allows the rendering of multiple triangles at a time with a potential 3D transformation of the triangles vertices. &#x0a;This is mostly used if you have a set of vertices and triangles and want to display them all at once (faster). points_definition is either a list or a matrix of point definition. &#x0a;Each point is defined by 2 to 4 numbers: x, y, z and color. A valid point definition can have multiple forms. Here are a couple of examples: [x, y, z, c], {x, y, z, c}, {x, y, #c}, {(x, y), c}, (x,y).">
				<Param name="[G]" />
				<Param name="pre_rotated_points" />
				<Param name="triangle_definitions" />
				<Param name="[zstring]" />
			</Overload>
			<Overload retVal="" descr="The basic form of TRIANGLE_P draws one triangle between specified pixel coordinates in the graphic using the specified color and transparency (0 &#x2264; Alpha &#x2264; 255). &#x0a;If 3 colors are specified, blends the colors in between the vertexes.">
				<Param name="[G]" />
				<Param name="x1" />
				<Param name="y1" />
				<Param name="x2" />
				<Param name="y2" />
				<Param name="x3" />
				<Param name="y3" />
				<Param name="c1" />
				<Param name="[c2" />
				<Param name="c3]" />
				<Param name="[Alpha]" />
			</Overload>
			<Overload retVal="" descr="The basic form of TRIANGLE_P draws one triangle between specified pixel coordinates in the graphic using the specified color and transparency (0 &#x2264; Alpha &#x2264; 255). &#x0a;If 3 colors are specified, blends the colors in between the vertexes.">
				<Param name="[G]" />
				<Param name="x1" />
				<Param name="y1" />
				<Param name="x2" />
				<Param name="y2" />
				<Param name="x3" />
				<Param name="y3" />
				<Param name="c1" />
				<Param name="[c2" />
				<Param name="c3]" />
				<Param name="[Alpha]" />
				<Param name="[&quot;ZString&quot;" />
				<Param name="z1" />
				<Param name="z2" />
				<Param name="z3]" />
			</Overload>
			<Overload retVal="" descr="The basic form of TRIANGLE_P draws one triangle between specified pixel coordinates in the graphic using the specified color and transparency (0 &#x2264; Alpha &#x2264; 255). &#x0a;If 3 colors are specified, blends the colors in between the vertexes.">
				<Param name="[G]" />
				<Param name="{x1" />
				<Param name="y1" />
				<Param name="[c1]" />
				<Param name="[z1]}" />
				<Param name="{x2" />
				<Param name="y2" />
				<Param name="[c2]" />
				<Param name="[z2]}" />
				<Param name="{x3" />
				<Param name="y3" />
				<Param name="[c3]" />
				<Param name="[z3]}" />
				<Param name="[&quot;ZString&quot;]" />
			</Overload>
		</KeyWord>
		<KeyWord name="TYPE" func="yes">
			<Overload retVal="" descr="Returns the type of the object: 0: Real, 1: Integer, 2: String, 3: Complex, 4: Matrix, 5: Error, 6: List, 8: Function, 9: Unit, 14.?: CAS object. the fractional part is the CAS type.">
				<Param name="object" />
			</Overload>
		</KeyWord>
		<KeyWord name="UFACTOR" func="yes">
			<Overload retVal="" descr="Converts a measurement using a compound unit into a measurement expressed in constituent units.">
				<Param name="Value_Unit1" />
				<Param name="1_Unit2" />
			</Overload>
		</KeyWord>
		<KeyWord name="UPPER" func="yes">
			<Overload retVal="" descr="Returns string with lowercase characters converted to uppercase.">
				<Param name="string" />
			</Overload>
		</KeyWord>
		<KeyWord name="USIMPLIFY" func="yes">
			<Overload retVal="" descr="Simplifies Value in a complex unit expression Unitsexpr to an equivalent value in a simpler unit expression.">
				<Param name="Value_Unitsexpr" />
			</Overload>
		</KeyWord>
		<KeyWord name="UTPC" func="yes">
			<Overload retVal="" descr="Upper-Tail Chi-Squared probability distribution function. Returns the Upper-Tail Chi- Squared probability, given degrees of freedom, evaluated at the given value. &#x0a;Returns the probability that a Chi-Squared random variable is greater than the given value.">
				<Param name="Degrees" />
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="UTPF" func="yes">
			<Overload retVal="" descr="Upper-Tail Snedecor's F Probability distribution function. Returns the Upper-Tail Snedecor's F probability, given Numerator degrees of freedom and Denominator degrees of freedom, evaluated at the given Value. &#x0a;Returns the probability that a Snedecor's F random variable is greater than the given value.">
				<Param name="Numerator" />
				<Param name="Denominator" />
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="UTPN" func="yes">
			<Overload retVal="" descr="Upper-Tail Normal Probability distribution function. Returns the Upper-Tail Normal probability, given Mean and Variance, evaluated at Value. &#x0a;Returns the probability that a normal random variable is greater than the given value. Note: The variance is the square of the standard deviation.">
				<Param name="Mean" />
				<Param name="Variance" />
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="UTPT" func="yes">
			<Overload retVal="" descr="Upper-Tail Student's t probability distribution function. Returns the Upper-Tail Students t probability, given degrees of freedom, evaluated at Value. &#x0a;Returns the probability that the Student's t random variable is greater than the given value.">
				<Param name="Degrees" />
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="VERSION" func="yes">
			<Overload retVal="" descr="Returns a string that contains the version numbers for the various components of the system. This is equivalent to the About Prime help page. &#x0a;If given integer n, returns that specific part of the version string.">
				<Param name="[n]" />
			</Overload>
		</KeyWord>
		<KeyWord name="WAIT" func="yes">
			<Overload retVal="" descr="Pauses program execution. If n &#x2265; 1: Execution paused for the specified number (n) seconds. If n = 0 or omitted: Execution paused until a key is pressed. &#x0a;If n = -1: Execution paused until a key is pressed or there is a mouse event. If a key is pressed, the key code is returned. &#x0a;If a mouse event happens, a list of the form { type, [x, y], [dx, dy] } is returned.">
				<Param name="n" />
			</Overload>
		</KeyWord>
		<KeyWord name="WHILE" />
		<KeyWord name="XOR" />
		<KeyWord name="a2q" func="yes">
			<Overload retVal="" descr="Given a symmetric matrix and a vector of variables, returns the quadratic form of the matrix using the variables in the vector.">
				<Param name="Matrix" />
				<Param name="[Var1" />
				<Param name="Var2&#x2026;.]" />
			</Overload>
		</KeyWord>
		<KeyWord name="abcuv" func="yes">
			<Overload retVal="" descr="Given three polynomials A, B, and C, returns U and V such that A*U+B*V=C. With a variable as the final argument, U and V are expressed in terms of that variable (if needed); otherwise, x is used.">
				<Param name="Poly_A" />
				<Param name="Poly_B" />
				<Param name="Poly_C" />
				<Param name="[Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="about" func="yes">
			<Overload retVal="" descr="Returns the hypothesis made with the assume and additionally commands on the variable Var.">
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="abscissa" func="yes">
			<Overload retVal="" descr="Returns the abscissa of a point.">
				<Param name="Point" />
			</Overload>
			<Overload retVal="" descr="Returns the abscissa of a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="acos2asin" func="yes">
			<Overload retVal="" descr="Replaces arccos(x) by &#x03C0;/2-arcsin(x) in the argument Expr.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="acos2atan" func="yes">
			<Overload retVal="" descr="Replaces arccos(x) by &#x03C0;/2-arctan(x/&#x221A;(1-x&#x00B2;)) in the argument.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="additionally" func="yes">
			<Overload retVal="" descr="Used in programming with assume( ) to state an additional assumption about a variable.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="affix" func="yes">
			<Overload retVal="" descr="Returns the coordinates of a point as a complex number.">
				<Param name="Point" />
			</Overload>
			<Overload retVal="" descr="Returns the coordinates of both the x- and y-lengths of a vector as a complex number.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="algvar" func="yes">
			<Overload retVal="" descr="Returns a matrix of the symbolic variable names used in an expression. The list is ordered by the algebraic extensions required to build the original expression.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="alog10" func="yes">
			<Overload retVal="" descr="Function x-&gt;10^x.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="altitude" func="yes">
			<Overload retVal="" descr="Given three non-collinear points, draws the altitude of the triangle defined by the three points that passes through the first point. The triangle does not have to be drawn.">
				<Param name="point1" />
				<Param name="point2" />
				<Param name="point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="angle" func="yes">
			<Overload retVal="" descr="Returns the measure of a directed angle. The first point is taken as the vertex of the angle and the next two points in order give the measure and orientation.">
				<Param name="Vertex" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="angleat" func="yes">
			<Overload retVal="" descr="Used in Symbolic view of the Geometry app. Given the three points of an angle and a fourth point as a location, displays the measure of the angle defined by the first three points. &#x0a;The measure is displayed, with a label, at the location in the Plot view given by the fourth point. The first point is the vertex of the angle.">
				<Param name="point1" />
				<Param name="point2" />
				<Param name="point3" />
				<Param name="point4" />
			</Overload>
		</KeyWord>
		<KeyWord name="append" func="yes">
			<Overload retVal="" descr="Append an element to a list.">
				<Param name="List" />
				<Param name="Element" />
			</Overload>
			<Overload retVal="" descr="Append an element to a vector.">
				<Param name="Vector" />
				<Param name="Element" />
			</Overload>
		</KeyWord>
		<KeyWord name="apply" func="yes">
			<Overload retVal="" descr="Returns a vector or matrix containing the results of applying the function f to the elements in the matrix.">
				<Param name="Var&#x2192;f(Var)" />
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Returns a vector or matrix containing the results of applying the function f to the elements in the vector.">
				<Param name="Var&#x2192;f(Var)" />
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="approx" func="yes">
			<Overload retVal="" descr="Used in the CAS to return the numerical evaluation of the first argument with the number of digits as the second argument.">
				<Param name="Expr" />
				<Param name="[Int]" />
			</Overload>
		</KeyWord>
		<KeyWord name="arcLen" func="yes">
			<Overload retVal="" descr="Returns the length of the arc of a curve between two points on the curve. &#x0a;The curve is an expression, the independent variable is declared, and the two points are defined by values of the independent variable.">
				<Param name="Expr" />
				<Param name="Real1" />
				<Param name="Real2" />
			</Overload>
		</KeyWord>
		<KeyWord name="area" func="yes">
			<Overload retVal="" descr="Returns the area of a circle.">
				<Param name="Circle" />
			</Overload>
			<Overload retVal="" descr="Returns the area under a function between two x-values.">
				<Param name="Function" />
				<Param name="Value1" />
				<Param name="Value2" />
			</Overload>
			<Overload retVal="" descr="Returns the area of a polygon.">
				<Param name="Polygon" />
			</Overload>
		</KeyWord>
		<KeyWord name="areaat" func="yes">
			<Overload retVal="" descr="Used in the Symbolic view of the Geometry app. Displays the algebraic area of a circle. The measure is displayed, with a label, at the given point in Plot view.">
				<Param name="Circle" />
				<Param name="Point" />
			</Overload>
			<Overload retVal="" descr="Used in the Symbolic view of the Geometry app. Displays the algebraic area of a polygon. The measure is displayed, with a label, at the given point in Plot view.">
				<Param name="Polygon" />
				<Param name="Point" />
			</Overload>
		</KeyWord>
		<KeyWord name="asin2acos" func="yes">
			<Overload retVal="" descr="Replaces arcsin(x) by &#x03C0;/2-arccos(x) in Expr.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="asin2atan" func="yes">
			<Overload retVal="" descr="Replaces arcsin(x) by arctan(x/&#x221A;(1-x&#x00B2;)) in Expr.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="assume" func="yes">
			<Overload retVal="" descr="Make an assumption on a variable.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="atan2acos" func="yes">
			<Overload retVal="" descr="Replaces arctan(x) by &#x03C0;/2-arccos(x/&#x221A;(1+x&#x00B2;)) in the argument.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="atrig2ln" func="yes">
			<Overload retVal="" descr="Returns an expression with inverse trigonometric functions rewritten using the natural logarithm function.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="barycenter" func="yes">
			<Overload retVal="" descr="Calculates the hypothetical center of mass of a set of points, each with a given weight (a real number). Each point, weight pair is enclosed in square brackets as a vector.">
				<Param name="[Point1" />
				<Param name="Weight1]" />
				<Param name="[Point2" />
				<Param name="Weight2]" />
				<Param name="&#x2026;" />
				<Param name="[Pointn" />
				<Param name="Weightn]" />
			</Overload>
		</KeyWord>
		<KeyWord name="basis" func="yes">
			<Overload retVal="" descr="Extract a basis from a spanning set of vectors.">
				<Param name="Lst(vector1, .., vectorn)" />
			</Overload>
		</KeyWord>
		<KeyWord name="betad" func="yes">
			<Overload retVal="" descr="Beta probability density function Computes the probability density of the beta distribution at x given parameters &#x03B1; and &#x03B2;.">
				<Param name="&#x03B1;" />
				<Param name="&#x03B2;" />
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="betad_cdf" func="yes">
			<Overload retVal="" descr="Returns the lower-tail probability of the beta probability density function for the value x, given parameters a and b.">
				<Param name="a" />
				<Param name="b" />
				<Param name="x" />
				<Param name="[x2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="betad_icdf" func="yes">
			<Overload retVal="" descr="Returns the value x such that the beta lower-tail probability of x, given parameters a and b, is p.">
				<Param name="a" />
				<Param name="b" />
				<Param name="p" />
			</Overload>
		</KeyWord>
		<KeyWord name="bisector" func="yes">
			<Overload retVal="" descr="Given three points, creates the bisector of the angle defined by the three points whose vertex is at the first point. The angle does not have to be drawn in the Plot view.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="bounded_function" />
		<KeyWord name="breakpoint" func="yes">
			<Overload retVal="" descr="Adds a breakpoint.">
				<Param name="Intg" />
			</Overload>
		</KeyWord>
		<KeyWord name="cFactor" func="yes">
			<Overload retVal="" descr="Returns an expression factorized over the complex field (on Gaussian integers if there are more than two).">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="cSolve" func="yes">
			<Overload retVal="" descr="Returns the solutions, including complex solutions, of Expr, for Var. If Expr is an expression, solves the equation Expr=0.">
				<Param name="Expr" />
				<Param name="[Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cZeros" func="yes">
			<Overload retVal="" descr="Returns the roots, including complex roots, of Expr (that is, the solution of Expr=0) or the matrix where the lines are the solutions of the system: Expr1=0, Expr2=0&#x2026;ExprN=0.">
				<Param name="Expr" />
				<Param name="[Var]" />
			</Overload>
			<Overload retVal="" descr="Returns the roots, including complex roots, of Expr (that is, the solution of Expr=0) or the matrix where the lines are the solutions of the system: Expr1=0, Expr2=0&#x2026;ExprN=0.">
				<Param name="{Expr1" />
				<Param name="Expr2" />
				<Param name="... ExprN}" />
				<Param name="{Vr1" />
				<Param name="Var2" />
				<Param name="... VarN}" />
			</Overload>
		</KeyWord>
		<KeyWord name="canonical_form" func="yes">
			<Overload retVal="" descr="Canonical form of a second degree polynomial.">
				<Param name="Trinomial" />
				<Param name="[Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cat" func="yes">
			<Overload retVal="" descr="Evaluates the objects in a sequence, then returns them concatenated as a string.">
				<Param name="Obj1" />
				<Param name="Obj2" />
				<Param name="..." />
				<Param name="Objn" />
			</Overload>
		</KeyWord>
		<KeyWord name="cauchy" func="yes">
			<Overload retVal="" descr="Cauchy probability density function. Computes the probability density of the Cauchy distribution at x given parameters x0 and a. By default, x0 is 0 and a is 1.">
				<Param name="[x0]" />
				<Param name="[a]" />
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="cauchy_cdf" func="yes">
			<Overload retVal="" descr="Returns the lower-tail probability of the Cauchy probability density function for the value x, given parameters x0 and a.">
				<Param name="x0" />
				<Param name="a" />
				<Param name="x" />
				<Param name="[x2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="cauchy_icdf" func="yes">
			<Overload retVal="" descr="Returns the value x such that the Cauchy lower-tail probability of x, given parameters x0 and a, is p.">
				<Param name="x0" />
				<Param name="a" />
				<Param name="p" />
			</Overload>
		</KeyWord>
		<KeyWord name="center" func="yes">
			<Overload retVal="" descr="Returns the center of a circle. The circle can be defined by the circle command or by name (e.g., GC).">
				<Param name="Circle" />
			</Overload>
		</KeyWord>
		<KeyWord name="charpoly" func="yes">
			<Overload retVal="" descr="Returns the coefficients of the characteristic polynomial of a matrix. With only one argument, the variable used in the polynomial is x. &#x0a;With a variable as second argument, the polynomial returned is in terms of that variable.">
				<Param name="Matrix, [Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="chinrem" func="yes">
			<Overload retVal="" descr="Given a matrix whose 2 rows each contain the coefficients of a polynomial, returns the Chinese remainder of those polynomials, also written as a matrix.">
				<Param name="Matrix_2xn" />
			</Overload>
		</KeyWord>
		<KeyWord name="cholesky" func="yes">
			<Overload retVal="" descr="For a numerical symmetric matrix A, returns the matrix L such that A=L*tran(L).">
				<Param name="matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="chrem" func="yes">
			<Overload retVal="" descr="Returns a vector containing the Chinese remainders for two sets of integers, contained in either two vectors or two lists.">
				<Param name="List1" />
				<Param name="List2" />
			</Overload>
			<Overload retVal="" descr="Returns a vector containing the Chinese remainders for two sets of integers, contained in either two vectors or two lists.">
				<Param name="Vector1" />
				<Param name="Vector2" />
			</Overload>
		</KeyWord>
		<KeyWord name="circle" func="yes">
			<Overload retVal="" descr="Draws a circle, given an equation in x and y.">
				<Param name="equation" />
			</Overload>
			<Overload retVal="" descr="Draws a circle, given a center and radius.">
				<Param name="Point1" />
				<Param name="Point2" />
			</Overload>
			<Overload retVal="" descr="Draws a circle, given the endpoints of the diameter.">
				<Param name="Point1" />
				<Param name="Point2-Point1" />
			</Overload>
		</KeyWord>
		<KeyWord name="circumcircle" func="yes">
			<Overload retVal="" descr="Draws the circumcircle of a triangle; that is, the circle circumscribed about a triangle.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="coeff" func="yes">
			<Overload retVal="" descr="Returns the list of coefficients of a polynomial with respect to the second argument or the coefficient of the term whose degree is Integer.">
				<Param name="Expr" />
				<Param name="[Var]" />
				<Param name="[Integer]" />
			</Overload>
		</KeyWord>
		<KeyWord name="col" func="yes">
			<Overload retVal="" descr="Returns the column n of the matrix A.">
				<Param name="Matrix" />
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Returns the sequence of the columns n1 &#x2026; n2 of the matrix A.">
				<Param name="Matrix" />
				<Param name="Interval" />
			</Overload>
		</KeyWord>
		<KeyWord name="colDim" func="yes">
			<Overload retVal="" descr="Returns the number of columns of a matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="collect" func="yes">
			<Overload retVal="" descr="Collects like terms in a polynomial expression. Factorizes the results, depending on the CAS settings.">
				<Param name="Poly" />
			</Overload>
			<Overload retVal="" descr="Collects like terms in a polynomial expression. Factorizes the results, depending on the CAS settings. Will collect with respect to Var.">
				<Param name="Poly" />
				<Param name="Var" />
			</Overload>
			<Overload retVal="" descr="Collects like terms in a list of polynomial expressions. Factorizes the results, depending on the CAS settings. If specified, will collect with respect to Var.">
				<Param name="{Poly1" />
				<Param name="Poly2, ..." />
				<Param name="Polyn}" />
			</Overload>
		</KeyWord>
		<KeyWord name="comDenom" func="yes">
			<Overload retVal="" descr="Rewrites a sum of rational fractions as a one rational fraction. The denominator of the one rational fraction is the common denominator of the rational fractions in the original expression.">
				<Param name="Expr" />
			</Overload>
			<Overload retVal="" descr="Rewrites a sum of rational fractions as a one rational fraction. The denominator of the one rational fraction is the common denominator of the rational fractions in the original expression. &#x0a;The numerator and denominator are developed according to the variable.">
				<Param name="Expr" />
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="common_perpendicular" func="yes">
			<Overload retVal="" descr="Draws the common perpendicular of the lines D1 and D2.">
				<Param name="Line(D1)" />
				<Param name="Line(D2)" />
			</Overload>
		</KeyWord>
		<KeyWord name="companion" func="yes">
			<Overload retVal="" descr="Companion matrix of a polynomial (an=1).">
				<Param name="Poly" />
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="compare" func="yes">
			<Overload retVal="" descr="Compares two objects and returns 1 if type(Obj1)&lt;type(Obj2) or if type(Obj1)==type(Obj2) and Obj1&lt;Obj2; otherwise returns 0.">
				<Param name="Obj1" />
				<Param name="Obj2" />
			</Overload>
		</KeyWord>
		<KeyWord name="complexroot" func="yes">
			<Overload retVal="" descr="With a polynomial and a real as its two arguments, returns a matrix. Each row of the matrix contains either a complex root of the polynomial with its multiplicity or an interval containing such a root and its multiplicity. &#x0a;The interval defines a (possibly) rectangular region in the complex plane where a complex root lies.">
				<Param name="Poly" />
				<Param name="Real" />
			</Overload>
			<Overload retVal="" descr="With a polynomial and a real as its two arguments, returns a matrix. Each row of the matrix contains either a complex root of the polynomial with its multiplicity or an interval containing such a root and its multiplicity. &#x0a;The interval defines a (possibly) rectangular region in the complex plane where a complex root lies. Returns only for those roots lying in the rectangular region defined by the diagonal created by the two complex numbers.">
				<Param name="Poly" />
				<Param name="Real" />
				<Param name="Complx1" />
				<Param name="Complx2" />
			</Overload>
		</KeyWord>
		<KeyWord name="conic" func="yes">
			<Overload retVal="" descr="Plots the graph of a conic section defined by an expression in x and y.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="contains" func="yes">
			<Overload retVal="" descr="Given a list or vector and an element, returns the index of the first occurrence of the element in the list or vector. If the element does not appear in the list or vector, returns 0">
				<Param name="List" />
				<Param name="Element" />
			</Overload>
			<Overload retVal="" descr="Given a list or vector and an element, returns the index of the first occurrence of the element in the list or vector. If the element does not appear in the list or vector, returns 0">
				<Param name="Vector" />
				<Param name="Element" />
			</Overload>
		</KeyWord>
		<KeyWord name="content" func="yes">
			<Overload retVal="" descr="Returns the greatest common divisor (GCD) of the coefficients of a polynomial.">
				<Param name="Poly" />
				<Param name="[Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="convexhull" func="yes">
			<Overload retVal="" descr="Returns a vector containing the points that serve as the convex hull for a given set of points.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="..." />
				<Param name="PointN" />
			</Overload>
		</KeyWord>
		<KeyWord name="coordinates" func="yes">
			<Overload retVal="" descr="Given a point or a vector of points, returns a matrix containing the x- and y-coordinates of those points. Each row of the matrix defines one point; the first column gives the x- coordinates and the second column contains the y-coordinates.">
				<Param name="Point" />
			</Overload>
			<Overload retVal="" descr="Given a point or a vector of points, returns a matrix containing the x- and y-coordinates of those points. Each row of the matrix defines one point; the first column gives the x- coordinates and the second column contains the y-coordinates.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="correlation" func="yes">
			<Overload retVal="" descr="Returns the correlation of the elements of a list or matrix.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Returns the correlation of the elements of a list or matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="cos2sintan" func="yes">
			<Overload retVal="" descr="Replaces cos(x) by sin(x)/tan(x) in the argument.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="count" func="yes">
			<Overload retVal="" descr="There are two uses for this function, whose first argument is always a mapping of a variable onto an expression. &#x0a;If the expression is a function of the variable, then the function is applied to each element in a list or matrix (the second argument) and the sum of the results is returned. &#x0a;If the expression is a Boolean test, then each element in a list or matrix is tested and the number of elements that pass the test is returned.">
				<Param name="Var&#x2192;Function" />
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="There are two uses for this function, whose first argument is always a mapping of a variable onto an expression. &#x0a;If the expression is a function of the variable, then the function is applied to each element in a list or matrix (the second argument) and the sum of the results is returned. &#x0a;If the expression is a Boolean test, then each element in a list or matrix is tested and the number of elements that pass the test is returned.">
				<Param name="Var&#x2192;Function" />
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="There are two uses for this function, whose first argument is always a mapping of a variable onto an expression.&#x0a;If the expression is a function of the variable, then the function is applied to each element in a list or matrix (the second argument) and the sum of the results is returned. &#x0a;If the expression is a Boolean test, then each element in a list or matrix is tested and the number of elements that pass the test is returned.">
				<Param name="Var&#x2192;Test" />
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="There are two uses for this function, whose first argument is always a mapping of a variable onto an expression. &#x0a;If the expression is a function of the variable, then the function is applied to each element in a list or matrix (the second argument) and the sum of the results is returned. &#x0a;If the expression is a Boolean test, then each element in a list or matrix is tested and the number of elements that pass the test is returned.">
				<Param name="Var&#x2192;Test" />
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="covariance" func="yes">
			<Overload retVal="" descr="Returns the covariance of the elements in a list or matrix.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Returns the covariance of the elements in a list or matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="covariance_correlation" func="yes">
			<Overload retVal="" descr="Returns a vector containing both the covariance and the correlation of the elements of a list or vector.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Returns a vector containing both the covariance and the correlation of the elements of a list or vector.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="cpartfrac" func="yes">
			<Overload retVal="" descr="Returns the result of partial fraction decomposition of a rational fraction in the Complex field.">
				<Param name="RatFrac" />
			</Overload>
		</KeyWord>
		<KeyWord name="crationalroot" func="yes">
			<Overload retVal="" descr="Returns the list of complex rational roots of a polynomial without indicating the multiplicity.">
				<Param name="Poly" />
			</Overload>
		</KeyWord>
		<KeyWord name="cumSum" func="yes">
			<Overload retVal="" descr="Accepts as argument either a list or a vector and returns a list or vector whose elements are the cumulative sums of the original argument.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Accepts as argument either a list or a vector and returns a list or vector whose elements are the cumulative sums of the original argument.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="curve" func="yes">
			<Overload retVal="" descr="Reserved word. Do not use for anything.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="degree" func="yes">
			<Overload retVal="" descr="Returns the degree of a polynomial.">
				<Param name="Poly" />
			</Overload>
		</KeyWord>
		<KeyWord name="delcols" func="yes">
			<Overload retVal="" descr="Given a matrix and an integer n, deletes the nth column from the matrix and returns the result. &#x0a;If an interval of two integers is used instead of a single integer, deletes all columns in the interval and returns the result.">
				<Param name="Matrix" />
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Given a matrix and an integer n, deletes the nth column from the matrix and returns the result. &#x0a;If an interval of two integers is used instead of a single integer, deletes all columns in the interval and returns the result.">
				<Param name="Matrix" />
				<Param name="Intg1..Intg2" />
			</Overload>
		</KeyWord>
		<KeyWord name="delrows" func="yes">
			<Overload retVal="" descr="Given a matrix and an integer n, deletes the nth row from the matrix and returns the result. &#x0a;If an interval of two integers is used instead of a single integer, deletes all rows in the interval and returns the result.">
				<Param name="Matrix" />
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Given a matrix and an integer n, deletes the nth row from the matrix and returns the result. &#x0a;If an interval of two integers is used instead of a single integer, deletes all rows in the interval and returns the result.">
				<Param name="Matrix" />
				<Param name="Intg1..Intg2" />
			</Overload>
		</KeyWord>
		<KeyWord name="deltalist" func="yes">
			<Overload retVal="" descr="Creates a new list or vector composed of the first differences of a list or vector; that is, the differences between consecutive elements in the list. &#x0a;The new list has one less element than the original list.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Creates a new list or vector composed of the first differences of a list or vector; that is, the differences between consecutive elements in the list. &#x0a;The new list has one less element than the original list.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="denom" func="yes">
			<Overload retVal="" descr="For integers a and b, returns the denominator of the fraction a/b after simplification.">
				<Param name="a/b" />
			</Overload>
		</KeyWord>
		<KeyWord name="desolve" func="yes">
			<Overload retVal="" descr="Returns the solution to a differential equation.">
				<Param name="Eq" />
				<Param name="[TimeVar]" />
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="diag" func="yes">
			<Overload retVal="" descr="Given a list, returns a matrix with the list elements along its diagonal and zeroes elsewhere. Given a matrix, returns a vector of the elements along its diagonal.">
				<Param name="list" />
			</Overload>
			<Overload retVal="" descr="Given a list, returns a matrix with the list elements along its diagonal and zeroes elsewhere. Given a matrix, returns a vector of the elements along its diagonal.">
				<Param name="matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="diff" func="yes">
			<Overload retVal="" descr="Returns the derivative of an expression with respect to a given variable or list of variables. You can use the differentiation template in the Template menu as well.">
				<Param name="Expr" />
				<Param name="[Var]" />
			</Overload>
			<Overload retVal="" descr="Returns the derivative of an expression with respect to a given variable or list of variables. You can use the differentiation template in the Template menu as well.">
				<Param name="Expr" />
				<Param name="[{Var1, Var2, &#x2026;}]" />
			</Overload>
		</KeyWord>
		<KeyWord name="distance" func="yes">
			<Overload retVal="" descr="Returns the distance between a point and a curve.">
				<Param name="Point" />
				<Param name="Curve" />
			</Overload>
			<Overload retVal="" descr="Returns the distance between two points.">
				<Param name="Point1" />
				<Param name="Point2" />
			</Overload>
		</KeyWord>
		<KeyWord name="distance2" func="yes">
			<Overload retVal="" descr="Returns the square of the distance between a point and a curve.">
				<Param name="Point" />
				<Param name="Curve" />
			</Overload>
			<Overload retVal="" descr="Returns the square of the distance between two points.">
				<Param name="Point1" />
				<Param name="Point2" />
			</Overload>
		</KeyWord>
		<KeyWord name="distanceat" func="yes">
			<Overload retVal="" descr="Similar to the distance command, but used in Symbolic view of the Geometry app. Displays the distance between two points and places that measurement at the location of Point3 in the Plot view. The distance is labeled.">
				<Param name="Point1" />
				<Param name="Curve" />
				<Param name="Point3" />
			</Overload>
			<Overload retVal="" descr="Similar to the distance command, but used in Symbolic view of the Geometry app. Displays the distance between a point and a curve and places that measurement at the location of Point3 in the Plot view. The distance is labeled.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="divergence" func="yes">
			<Overload retVal="" descr="Returns the divergence of a vector field, defined by divergence([A,B,C],[x,y,z])=dA/dx+dB/dy+dC/dz.">
				<Param name="[Expr1" />
				<Param name="Expr2" />
				<Param name="... ExprN]" />
				<Param name="[Var1" />
				<Param name="Var2" />
				<Param name="... VarN]" />
			</Overload>
		</KeyWord>
		<KeyWord name="divis" func="yes">
			<Overload retVal="" descr="Given a polynomial or list of polynomials, returns a vector containing the divisors of the polynomial.">
				<Param name="Poly" />
			</Overload>
			<Overload retVal="" descr="Given a polynomial or list of polynomials, returns a vector containing the divisors of the polynomial.">
				<Param name="{Poly1" />
				<Param name="Poly2" />
				<Param name="&#x2026;Polyn}" />
			</Overload>
		</KeyWord>
		<KeyWord name="division_point" func="yes">
			<Overload retVal="" descr="For two points A and B, and a numerical factor k, returns a point C such that C - B = k*(C - A). The two points may be referenced by name or represented by complex numbers.">
				<Param name="CplxA" />
				<Param name="CplxB" />
				<Param name="Cplxk" />
			</Overload>
			<Overload retVal="" descr="For two points A and B, and a numerical factor k, returns a point C such that C - B = k*(C - A). The two points may be referenced by name or represented by complex numbers.">
				<Param name="PointA" />
				<Param name="PointB" />
				<Param name="Realk" />
			</Overload>
		</KeyWord>
		<KeyWord name="divpc" func="yes">
			<Overload retVal="" descr="Returns the n-degree Taylor polynomial for the quotient of 2 polynomials.">
				<Param name="Poly1" />
				<Param name="Poly2" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="egcd" func="yes">
			<Overload retVal="" descr="Given two polynomials, A and B, returns three polynomials U, V and D such that: U(x)*A(x)+V(x)*B(x)=D(x), where D(x)=GCD(A(x),B(x)), the greatest common divisor of polynomials A and B. &#x0a;The polynomials can be provided in symbolic form or as lists of coefficients in descending order. Without a third argument, it is assumed that the polynomials are expressions of x. With a variable as third argument, the polynomials are expressions of that variable.">
				<Param name="ListA" />
				<Param name="ListB" />
				<Param name="[Var]" />
			</Overload>
			<Overload retVal="" descr="Given two polynomials, A and B, returns three polynomials U, V and D such that: U(x)*A(x)+V(x)*B(x)=D(x), where D(x)=GCD(A(x),B(x)), the greatest common divisor of polynomials A and B. &#x0a;The polynomials can be provided in symbolic form or as lists of coefficients in descending order. Without a third argument, it is assumed that the polynomials are expressions of x. With a variable as third argument, the polynomials are expressions of that variable.">
				<Param name="PolyA" />
				<Param name="PolyB" />
				<Param name="[Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="eigVc" func="yes">
			<Overload retVal="" descr="Computes the eigenvectors of a diagonalizable matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="eigVl" func="yes">
			<Overload retVal="" descr="Returns the Jordan matrix associated with a matrix when the eigenvalues are calculable.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="eigenvals" func="yes">
			<Overload retVal="" descr="Returns the sequence of the eigenvalues of a matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="eigenvects" func="yes">
			<Overload retVal="" descr="Computes the eigenvectors of a diagonalizable matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="element" func="yes">
			<Overload retVal="" descr="Creates a point on a geometric object whose abscissa is a given value or creates a real value on a given interval as a slider bar. &#x0a;The value you set using element(Real1..Real2) can be used as a coefficient in a function you subsequently define in Symbolic view and plot in Plot view. &#x0a;In addition, it can be used in a measurement or calculation in Numeric view.">
				<Param name="Object" />
				<Param name="Real" />
			</Overload>
			<Overload retVal="" descr="Creates a point on a geometric object whose abscissa is a given value or creates a real value on a given interval as a slider bar. &#x0a;The value you set using element(Real1..Real2) can be used as a coefficient in a function you subsequently define in Symbolic view and plot in Plot view. &#x0a;In addition, it can be used in a measurement or calculation in Numeric view.">
				<Param name="Real1..Real2" />
			</Overload>
		</KeyWord>
		<KeyWord name="ellipse" func="yes">
			<Overload retVal="" descr="Draws an ellipse, given the foci and either a point on the ellipse or a scalar that is one half the constant sum of the distances from a point on the ellipse to each of the foci.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
			<Overload retVal="" descr="Draws an ellipse, given the foci and either a point on the ellipse or a scalar that is one half the constant sum of the distances from a point on the ellipse to each of the foci.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Realk" />
			</Overload>
		</KeyWord>
		<KeyWord name="equilateral_triangle" func="yes">
			<Overload retVal="" descr="Draws an equilateral triangle defined by one of its sides; that is, by two consecutive vertices. The third point is calculated automatically, but is not defined symbolically. &#x0a;If a lowercase variable is added as a third argument, then the third point is labeled with the variable name and the coordinates of the third point are stored in that variable. &#x0a;The orientation of the triangle is counterclockwise from the first point.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="[Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="erf" func="yes">
			<Overload retVal="" descr="For a real value x, returns the approximate value of 2/&#x221A;&#x03C0;*int(e^(-t&#x00B2;),t,0,x)">
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="erfc" func="yes">
			<Overload retVal="" descr="For a real value x, returns the approximate value of 2/&#x221A;&#x03C0;*int(exp(-t&#x00B2;),t,x,&#x221E;).">
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="error" func="yes">
			<Overload retVal="" descr="Generates the display of an error message containing String in a CAS program.">
				<Param name="String" />
			</Overload>
		</KeyWord>
		<KeyWord name="euler" func="yes">
			<Overload retVal="" descr="Euler&#x2019;s phi (or totient) function. Takes a positive integer and returns the number of positive integers less than or equal to it that are coprime to it.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="evalc" func="yes">
			<Overload retVal="" descr="Returns a complex expression written in the form real + i*imag.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="evalf" func="yes">
			<Overload retVal="" descr="Given an expression and a number of significant digits, returns the numerical evaluation of the expression to the given number of significant digits. &#x0a;With just an expression, returns the numerical evaluation based on the CAS settings.">
				<Param name="Expr" />
				<Param name="[Integer]" />
			</Overload>
		</KeyWord>
		<KeyWord name="even" func="yes">
			<Overload retVal="" descr="Tests whether or not an integer is even. Returns 1 if it is and 0 if it is not.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="exact" func="yes">
			<Overload retVal="" descr="Converts a decimal expression to a rational or real expression within the Epsilon tolerance specified in CAS settings.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="exbisector" func="yes">
			<Overload retVal="" descr="Given three points that define a triangle, creates the bisector of the exterior angles of the triangle whose common vertex is at the first point. &#x0a;The triangle does not have to be drawn in the Plot view.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="excircle" func="yes">
			<Overload retVal="" descr="Given three points that define a triangle, draws the excircles of the triangle that is tangent to the side defined by the last two points and also tangent to the extensions of the two sides whose common vertex is the first point.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="exp2pow" func="yes">
			<Overload retVal="" descr="Transforms an expression of the form e^(n*ln(x)) rewritten as a power of x. Applies e^(n*ln(x))=xⁿ.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="exp2trig" func="yes">
			<Overload retVal="" descr="Returns an expression with complex exponentials rewritten in terms of sine and cosine.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="expand" func="yes">
			<Overload retVal="" descr="Returns an expression expanded.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="expexpand" func="yes">
			<Overload retVal="" descr="Expands exponentials using the identity e^(a*f(x))=e^(f(x))^a.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="exponential" func="yes">
			<Overload retVal="" descr="Exponential probability density function. Computes the probability density of the exponential distribution at x given parameter k.">
				<Param name="k, x" />
			</Overload>
		</KeyWord>
		<KeyWord name="exponential_cdf" func="yes">
			<Overload retVal="" descr="Cumulative exponential distribution function. Returns the lower-tail probability of the exponential probability density function for the value x, given parameter k.">
				<Param name="k, x, [x2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="exponential_icdf" func="yes">
			<Overload retVal="" descr="Inverse cumulative exponential distribution function. Returns the value x such that the exponential lower-tail probability of x, given parameter k, is p.">
				<Param name="k, p" />
			</Overload>
		</KeyWord>
		<KeyWord name="exponential_regression" func="yes">
			<Overload retVal="" descr="Given a set of points, returns a vector containing the coefficients a and b of y=b*a^x, the exponential which best fits the set of points. &#x0a;The points may be the elements in two lists or the rows of a 2 x n matrix.">
				<Param name="List1" />
				<Param name="List2" />
			</Overload>
			<Overload retVal="" descr="Given a set of points, returns a vector containing the coefficients a and b of y=b*a^x, the exponential which best fits the set of points. &#x0a;The points may be the elements in two lists or the rows of a 2 x n matrix.">
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Given a set of points, returns a vector containing the coefficients a and b of y=b*a^x, the exponential which best fits the set of points. &#x0a;The points may be the elements in two lists or the rows of a 2 x n matrix.">
				<Param name="Vector1" />
				<Param name="Vector2" />
			</Overload>
		</KeyWord>
		<KeyWord name="extract_measure" func="yes">
			<Overload retVal="" descr="Returns the definition of a geometric object. For a point, that definition consists of the coordinates of the point. &#x0a;For other objects, the definition mirrors their definition in Symbolic view, with the coordinates of their defining points supplied.">
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="ezgcd" func="yes">
			<Overload retVal="" descr="Uses the EZ GCD algorithm to return the greatest common divisor of two polynomials with at least two variables.">
				<Param name="Poly1" />
				<Param name="Poly2" />
			</Overload>
		</KeyWord>
		<KeyWord name="f2nd" func="yes">
			<Overload retVal="" descr="Returns a vector consisting of the numerator and denominator of an irreducible form of a rational fraction.">
				<Param name="Frac" />
			</Overload>
			<Overload retVal="" descr="Returns a vector consisting of the numerator and denominator of an irreducible form of a rational fraction.">
				<Param name="RatFrac" />
			</Overload>
		</KeyWord>
		<KeyWord name="fMax" func="yes">
			<Overload retVal="" descr="Given an expression in x, returns the value of x for which the expression has its maximum value.">
				<Param name="Expr" />
			</Overload>
			<Overload retVal="" descr="Given an expression and a variable, returns the value of that variable for which the expression has its maximum value.">
				<Param name="Expr" />
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="fMin" func="yes">
			<Overload retVal="" descr="Given an expression in x, returns the value of x for which the expression has its minimum value.">
				<Param name="Expr" />
			</Overload>
			<Overload retVal="" descr="Given an expression and a variable, returns the value of that variable for which the expression has its minimum value.">
				<Param name="Expr" />
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="factor" func="yes">
			<Overload retVal="" descr="Returns a polynomial factorized. Similar to collect, but will factor using square roots.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="factor_xn" func="yes">
			<Overload retVal="" descr="For a given polynomial in x of degree n, factors out xⁿ and returns the resulting product.">
				<Param name="Poly" />
			</Overload>
		</KeyWord>
		<KeyWord name="factorial" func="yes">
			<Overload retVal="" descr="Returns the factorial of an integer. factorial(n)=n!.">
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Returns the solution to the gamma function. factorial(a)=a! = Gamma(a + 1).">
				<Param name="Real" />
			</Overload>
		</KeyWord>
		<KeyWord name="factors" func="yes">
			<Overload retVal="" descr="Returns the list of prime factors of a polynomial; each factor followed by its multiplicity.">
				<Param name="Poly" />
			</Overload>
			<Overload retVal="" descr="Returns the list of prime factors of a polynomial; each factor followed by its multiplicity.">
				<Param name="{Poly1" />
				<Param name="Poly2" />
				<Param name="..." />
				<Param name="Polyn}" />
			</Overload>
		</KeyWord>
		<KeyWord name="fcoeff" func="yes">
			<Overload retVal="" descr="Returns the polynomial described by a list of roots, each followed by its order.">
				<Param name="[Root1" />
				<Param name="Order1" />
				<Param name="Root2" />
				<Param name="Order2" />
				<Param name="..." />
				<Param name="Rootn" />
				<Param name="Ordern]" />
			</Overload>
		</KeyWord>
		<KeyWord name="fft" func="yes">
			<Overload retVal="" descr="Returns the discrete Fourier transform in R.">
				<Param name="Vector" />
			</Overload>
			<Overload retVal="" descr="Returns the discrete Fourier transform in the field Z/pZ, with a primitive nth root of 1 (n=size(Vector)).">
				<Param name="Vector" />
				<Param name="a" />
				<Param name="p" />
			</Overload>
		</KeyWord>
		<KeyWord name="format" func="yes">
			<Overload retVal="" descr="Returns a real number as a string with the indicated format (f=float, s=scientific, e=engineering).">
				<Param name="Real" />
				<Param name="String" />
			</Overload>
		</KeyWord>
		<KeyWord name="fourier_an" func="yes">
			<Overload retVal="" descr="Returns the nth Fourier coefficient an=2/T*&#x222B;(f(x)*cos(2*pi*n*x/T),a,a+T).">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="T" />
				<Param name="n" />
				<Param name="a" />
			</Overload>
		</KeyWord>
		<KeyWord name="fourier_bn" func="yes">
			<Overload retVal="" descr="Returns the nth Fourier coefficient bn=2/T*&#x222B;(f(x)*sin(2*pi*n*x/T),a,a+T).">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="T" />
				<Param name="n" />
				<Param name="a" />
			</Overload>
		</KeyWord>
		<KeyWord name="fourier_cn" func="yes">
			<Overload retVal="" descr="Returns the nth Fourier coefficient cn=1/T*&#x222B;(f(x)*exp(-2*i*pi*n*x/T),a,a+T).">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="T" />
				<Param name="n" />
				<Param name="a" />
			</Overload>
		</KeyWord>
		<KeyWord name="frac" func="yes">
			<Overload retVal="" descr="Returns the fractional parts of a list of real numbers.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Returns the fractional part of a real number.">
				<Param name="Real" />
			</Overload>
		</KeyWord>
		<KeyWord name="fracmod" func="yes">
			<Overload retVal="" descr="For a given expression and an integer n, returns the fraction a/b such that a/b=Expr mod n, where -&#x221A;n/2&lt;a&#x2264;&#x221A;n/2 and 0&#x2264;b&lt;&#x221A;n/2">
				<Param name="Expr" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="froot" func="yes">
			<Overload retVal="" descr="Returns the list of roots and poles of a rational polynomial with their multiplicities.">
				<Param name="RatPoly" />
			</Overload>
		</KeyWord>
		<KeyWord name="fsolve" func="yes">
			<Overload retVal="" descr="Returns the numerical solution of an equation. With the optional third argument you can specify a guess for the solution or an interval within which it is expected that the solution will occur. &#x0a;With the optional fourth argument you can name the iterative algorithm to be used by the solver. &#x0a;If you are solving for a single variable, your options are bisection_solver, newton_solver, or newtonj_solver. &#x0a;If solving for 2 variables, your only option is newton_solver.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="[Guess or Interval]" />
				<Param name="[Method]" />
			</Overload>
			<Overload retVal="" descr="Returns the numerical solution of a system of equations. With the optional third argument you can specify a guess for the solution or an interval within which it is expected that the solution will occur. &#x0a;With the optional fourth argument you can name the iterative algorithm to be used by the solver. &#x0a;If you are solving for a single variable, your options are bisection_solver, newton_solver, or newtonj_solver. &#x0a;If solving for 2 variables, your only option is newton_solver.">
				<Param name="ExprVector" />
				<Param name="[Guess or Interval]" />
				<Param name="[Method}" />
			</Overload>
		</KeyWord>
		<KeyWord name="function_diff" func="yes">
			<Overload retVal="" descr="Returns the derivative function as a mapping of x onto the derivative of the given function.">
				<Param name="FunctionName" />
			</Overload>
		</KeyWord>
		<KeyWord name="gammad" func="yes">
			<Overload retVal="" descr="Gamma probability density function. Computes the probability density of the gamma distribution at x given parameters a and t.">
				<Param name="a" />
				<Param name="t" />
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="gammad_cdf" func="yes">
			<Overload retVal="" descr="Cumulative gamma distribution function. Returns the lower-tail probability of the gamma probability density function for the value x, given parameters a and t. &#x0a;With the optional fourth argument x2, returns the area between the two x-values.">
				<Param name="a" />
				<Param name="t" />
				<Param name="x" />
				<Param name="[x2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="gammad_icdf" func="yes">
			<Overload retVal="" descr="Inverse cumulative gamma distribution function Returns the value x such that the gamma lower-tail probability of x, given parameters a and t, is p.">
				<Param name="a" />
				<Param name="t" />
				<Param name="p" />
			</Overload>
		</KeyWord>
		<KeyWord name="gauss" func="yes">
			<Overload retVal="" descr="Given an expression followed by a vector of variables, uses the Gauss algorithm to return the quadratic form of the expression written as a sum or difference of squares of the variables given in the vector.">
				<Param name="Expr" />
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="gbasis" func="yes">
			<Overload retVal="" descr="Given a vector of polynomials and a vector of variables, returns the Groebner basis of the ideal spanned by the set of polynomials.">
				<Param name="[Poly1" />
				<Param name="Poly2, ...]" />
				<Param name="[Var1" />
				<Param name="Var2" />
				<Param name="...]" />
			</Overload>
		</KeyWord>
		<KeyWord name="gcd" func="yes">
			<Overload retVal="" descr="Returns the greatest common divisor of 2 integers.">
				<Param name="Integer1" />
				<Param name="Integer2" />
			</Overload>
			<Overload retVal="" descr="Returns the greatest common divisor of 2 polynomials of several variables.">
				<Param name="Poly1" />
				<Param name="Poly2" />
			</Overload>
		</KeyWord>
		<KeyWord name="grad" func="yes">
			<Overload retVal="" descr="Returns the gradient of an expression. With a list of variables as second argument, returns the vector of partial derivatives.">
				<Param name="Expr" />
				<Param name="ListVars" />
			</Overload>
		</KeyWord>
		<KeyWord name="gramschmidt" func="yes">
			<Overload retVal="" descr="Given a basis of a vector subspace, and a function that defines a scalar product on this vector subspace, returns an orthonormal basis for that function.">
				<Param name="Vector" />
				<Param name="Function" />
			</Overload>
		</KeyWord>
		<KeyWord name="greduce" func="yes">
			<Overload retVal="" descr="Given a polynomial and both a vector of polynomials and a vector of variables, returns the remainder of the division of the polynomial by the Groebner basis of the vector of polynomials.">
				<Param name="Poly1" />
				<Param name="[Poly2, Poly3, ...]" />
				<Param name="[Var1, Var2, ...]" />
			</Overload>
		</KeyWord>
		<KeyWord name="hadamard" func="yes">
			<Overload retVal="" descr="Hadamard bound of a matrix or element by element multiplication of 2 matrices.">
				<Param name="Matrix" />
				<Param name="[Matrix]" />
			</Overload>
		</KeyWord>
		<KeyWord name="half_line" func="yes">
			<Overload retVal="" descr="Given 2 points, draws a ray from the first point through the second point.">
				<Param name="Point1" />
				<Param name="Point2" />
			</Overload>
		</KeyWord>
		<KeyWord name="halftan" func="yes">
			<Overload retVal="" descr="Transforms sin(x), cos(x) and tan(x) as a function of tan(x/2).">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="halftan_hyp2exp" func="yes">
			<Overload retVal="" descr="Transforms the trigonometric functions in tan(x/2) and hyperbolic functions into exponentials.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="halt" />
		<KeyWord name="hamdist" func="yes">
			<Overload retVal="" descr="Returns the Hamming distance between two integers.">
				<Param name="Intgr1" />
				<Param name="Intgr2" />
			</Overload>
		</KeyWord>
		<KeyWord name="harmonic_conjugate" func="yes">
			<Overload retVal="" descr="Given three parallel or concurrent lines, returns equation of the harmonic conjugate of Line3 with respect to Line1 and Line2.">
				<Param name="Line1" />
				<Param name="Line2" />
				<Param name="Line3" />
			</Overload>
			<Overload retVal="" descr="Returns the harmonic conjugate of 3 points. Specifically, returns the harmonic conjugate of Point3 with respect to Point1 and Point2.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="harmonic_division" func="yes">
			<Overload retVal="" descr="Returns the 4 points (resp lines) and affects the last argument, such as the 4 points (resp lines) are in a harmonic division.">
				<Param name="line1" />
				<Param name="line2" />
				<Param name="line3" />
				<Param name="var" />
			</Overload>
			<Overload retVal="" descr="Returns the 4 points (resp lines) and affects the last argument, such as the 4 points (resp lines) are in a harmonic division.">
				<Param name="point1" />
				<Param name="point2" />
				<Param name="point3" />
				<Param name="var" />
			</Overload>
		</KeyWord>
		<KeyWord name="has" func="yes">
			<Overload retVal="" descr="Checks if a variable is in an expression. Returns 1 if the variable is in the expression, and returns 0 otherwise.">
				<Param name="Expr" />
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="head" func="yes">
			<Overload retVal="" descr="Returns the first element of a set of objects.">
				<Param name="Obj1" />
				<Param name="Obj2, ..." />
			</Overload>
			<Overload retVal="" descr="Returns the first element of a string.">
				<Param name="String" />
			</Overload>
			<Overload retVal="" descr="Returns the first element of a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="hermite" func="yes">
			<Overload retVal="" descr="Returns the Hermite polynomial of degree n, where n is an integer less than 1556.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="hessenberg" func="yes">
			<Overload retVal="" descr="Given Matrix_A, returns the matrix reduction to Hessenberg form. Returns [P,B] such that B=inv(P)*A*P.">
				<Param name="Matrix_A" />
			</Overload>
		</KeyWord>
		<KeyWord name="hessian" func="yes">
			<Overload retVal="" descr="Returns the Hessian matrix of an expression.">
				<Param name="Expr" />
				<Param name="ListVar" />
			</Overload>
		</KeyWord>
		<KeyWord name="hexagon" func="yes">
			<Overload retVal="" descr="Draws a regular hexagon defined by one of its sides; that is, by two consecutive vertices. The remaining points are calculated automatically, but are not defined symbolically. &#x0a;The orientation of the hexagon is counterclockwise from the first point.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="[Var1" />
				<Param name="Var2" />
				<Param name="Var3" />
				<Param name="Var4]" />
			</Overload>
		</KeyWord>
		<KeyWord name="hilbert" func="yes">
			<Overload retVal="" descr="Given a positive integer n, returns the nth order Hilbert matrix. Each element of the matrix is given by the formula 1/(j+k-1) where j is the row number and k is the column number.">
				<Param name="n" />
			</Overload>
		</KeyWord>
		<KeyWord name="homothety" func="yes">
			<Overload retVal="" descr="Dilates a geometric object, with respect to a center point, by a scale factor.">
				<Param name="Point" />
				<Param name="Realk" />
				<Param name="Object" />
			</Overload>
		</KeyWord>
		<KeyWord name="horner" func="yes">
			<Overload retVal="" descr="Returns the value of a polynomial P(a) calculated with Horner's method. The polynomial may be given as a symbolic expression or as a vector of coefficients.">
				<Param name="Polynomial" />
				<Param name="Real" />
			</Overload>
		</KeyWord>
		<KeyWord name="hyp2exp" func="yes">
			<Overload retVal="" descr="Returns an expression with hyperbolic terms rewritten as exponentials.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="hyperbola" func="yes">
			<Overload retVal="" descr="Draws a hyperbola, given the foci and a point on the hyperbola.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
			<Overload retVal="" descr="Draws a hyperbola, given the foci and a scalar that is one half the constant difference of the distances from a point on the hyperbola to each of the foci.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Realk" />
			</Overload>
		</KeyWord>
		<KeyWord name="iPart" func="yes">
			<Overload retVal="" descr="Returns a real number without its fractional part or a list of real numbers each without its fractional part.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Returns a real number without its fractional part or a list of real numbers each without its fractional part.">
				<Param name="Real" />
			</Overload>
		</KeyWord>
		<KeyWord name="iabcuv" func="yes">
			<Overload retVal="" descr="Returns [u,v] such as au+bv=c for 3 integers a,b,c">
				<Param name="Intg(a)" />
				<Param name="Intg(b)" />
				<Param name="Intg(c)" />
			</Overload>
		</KeyWord>
		<KeyWord name="ibasis" func="yes">
			<Overload retVal="" descr="Given two matrices, interprets them as two vector spaces and returns the vector basis of their intersection.">
				<Param name="Matrix1" />
				<Param name="Matrix2)" />
			</Overload>
		</KeyWord>
		<KeyWord name="ibpdv" func="yes">
			<Overload retVal="" descr="Performs integration by parts of the expression f(x)=u(x)*v'(x), with f(x) as the first argument and v(x) (or 0) as the second argument. &#x0a;Specifically, returns a vector whose first element is u(x)*v(x) and whose second element is v(x)*u'(x). &#x0a;With the optional third, fourth and fifth arguments you can specify a variable of integration and bounds of the integration. &#x0a;If no variable of integration is provided, it is taken as x.">
				<Param name="f(Var)" />
				<Param name="v(Var)" />
				<Param name="[Var]" />
				<Param name="[Real1]" />
				<Param name="[Real2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ibpu" func="yes">
			<Overload retVal="" descr="Performs integration by parts of the expression f(x)=u(x)*v'(x), with f(x) as the first argument and u(x) (or 0) as the second argument. &#x0a;Specifically, it returns a vector whose first element is u(x)*v(x) and whose second element is v(x)*u'(x). &#x0a;With the optional third, fourth and fifth arguments you can specify a variable of integration and bounds of the integration. &#x0a;If no variable of integration is provided, it is taken as x.">
				<Param name="f(Var)" />
				<Param name="u(Var)" />
				<Param name="[Var]" />
				<Param name="[Real1]" />
				<Param name="[Real2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ichinrem" func="yes">
			<Overload retVal="" descr="Integer Chinese Remainder Theorem for two equations. Takes two lists [a, p] and [b, q] and returns a list of two integers, [r, n], such that x&#x2261;r mod n. In this case, x is such that x&#x2261;a mod p and x&#x2261;b mod q; also, n=p*q.">
				<Param name="[a, p]" />
				<Param name="[b, q])" />
			</Overload>
		</KeyWord>
		<KeyWord name="icontent" func="yes">
			<Overload retVal="" descr="Returns the greatest common divisor of the integer coefficients of a polynomial.">
				<Param name="Poly" />
				<Param name="[Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="id" func="yes">
			<Overload retVal="" descr="The id entity function: x&#x2192;x. Returns a set containing the original argument.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="identity" func="yes">
			<Overload retVal="" descr="Given an integer n, returns the identity matrix of dimension n.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="idivis" func="yes">
			<Overload retVal="" descr="Returns a list of all the factors of an integer or of a list of integers.">
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Returns a list of all the factors of an integer or of a list of integers.">
				<Param name="{Intgr1" />
				<Param name="Intgr2" />
				<Param name="... Intgrn}" />
			</Overload>
		</KeyWord>
		<KeyWord name="iegcd" func="yes">
			<Overload retVal="" descr="Given two integers a and b, returns the extended greatest common divisor for two integers. Returns [u,v,igcd(a,b)] such that a*u+b*v=igcd(a,b).">
				<Param name="Integer1" />
				<Param name="Integer2" />
			</Overload>
		</KeyWord>
		<KeyWord name="ifactor" func="yes">
			<Overload retVal="" descr="Returns the prime factorization of an integer as a product. Can be used with STO▶. Note: in some cases, factorization may fail. &#x0a;In these cases, the command will return the product of -1 and the opposite of the original input. The -1 indicates that factorization failed.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="ifactors" func="yes">
			<Overload retVal="" descr="Similar to ifactor, but returns a list of the factors of the integer with their multiplicities.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="ifft" func="yes">
			<Overload retVal="" descr="Returns the inverse discrete Fourier transform.">
				<Param name="Vect" />
			</Overload>
		</KeyWord>
		<KeyWord name="igcd" func="yes">
			<Overload retVal="" descr="Returns the integer that is the greatest common divisor of two or more integers.">
				<Param name="Intgr1" />
				<Param name="Intgr2" />
				<Param name="... Intgrn" />
			</Overload>
		</KeyWord>
		<KeyWord name="ihermite" func="yes">
			<Overload retVal="" descr="Given Matrix_A, returns the Hermite normal form of a matrix with coefficients in Z: returns U, B such that U is invertible in Z, B is upper triangular and B=U*A">
				<Param name="Matrix_A" />
			</Overload>
		</KeyWord>
		<KeyWord name="ilaplace" func="yes">
			<Overload retVal="" descr="Returns the inverse Laplace transform of a rational fraction.">
				<Param name="Expr" />
				<Param name="[Var]" />
				<Param name="[IlapVar]" />
			</Overload>
		</KeyWord>
		<KeyWord name="implicit_diff" func="yes">
			<Overload retVal="" descr="Returns the implicit derivative of expression with respect to var1, treating var2 as the dependent variable. expression is usually an equation; if there is no equal sign, expression=0 is assumed.">
				<Param name="expression" />
				<Param name="var1" />
				<Param name="var2" />
			</Overload>
		</KeyWord>
		<KeyWord name="incircle" func="yes">
			<Overload retVal="" descr="Draws the incircle of a triangle, the circle tangent to all three sides of the triangle.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="int" func="yes">
			<Overload retVal="" descr="Returns the integral of an expression. With one expression as argument, returns the indefinite integral with respect to x. &#x0a;With the optional second, third and fourth arguments you can specify the variable of integration and the bounds for a definite integral.">
				<Param name="Expr" />
				<Param name="[Var]" />
				<Param name="[Real1" />
				<Param name="Real2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="inter" func="yes">
			<Overload retVal="" descr="Returns the intersections of two curves as a vector.">
				<Param name="Curve1" />
				<Param name="Curve2" />
			</Overload>
		</KeyWord>
		<KeyWord name="interval2center" func="yes">
			<Overload retVal="" descr="Returns the center of an interval.">
				<Param name="Interval" />
			</Overload>
			<Overload retVal="" descr="Returns the center of an object.">
				<Param name="Object" />
			</Overload>
		</KeyWord>
		<KeyWord name="inv" func="yes">
			<Overload retVal="" descr="Returns the inverse of an expression or matrix.">
				<Param name="Expr" />
			</Overload>
			<Overload retVal="" descr="Returns the inverse of an expression or matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="inversion" func="yes">
			<Overload retVal="" descr="Draws the inversion of a point, with respect to another point, by a scale factor.">
				<Param name="Point1" />
				<Param name="Realk" />
				<Param name="Point2" />
			</Overload>
		</KeyWord>
		<KeyWord name="invlaplace" func="yes">
			<Overload retVal="" descr="Returns the inverse Laplace transform of an expression.">
				<Param name="Expr" />
				<Param name="[Var]" />
				<Param name="[IlapVar]" />
			</Overload>
		</KeyWord>
		<KeyWord name="invztrans" func="yes">
			<Overload retVal="" descr="Returns the inverse z transform of a rational fraction.">
				<Param name="Expr" />
				<Param name="[Var]" />
				<Param name="[InvZtransVar]" />
			</Overload>
		</KeyWord>
		<KeyWord name="iquo" func="yes">
			<Overload retVal="" descr="Returns the integer quotient of the Euclidean division of two integers.">
				<Param name="Intgr1" />
				<Param name="Intgr2" />
			</Overload>
		</KeyWord>
		<KeyWord name="iquorem" func="yes">
			<Overload retVal="" descr="Returns the Euclidean quotient and remainder of two integers.">
				<Param name="Integer1" />
				<Param name="Integer2" />
			</Overload>
		</KeyWord>
		<KeyWord name="irem" func="yes">
			<Overload retVal="" descr="Returns the integer remainder from the Euclidean division of two integers.">
				<Param name="Intgr1" />
				<Param name="Intgr2" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_collinear" func="yes">
			<Overload retVal="" descr="Takes a set of points as argument and tests whether or not they are collinear. Returns 1 if the points are collinear and 0 otherwise.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="..." />
				<Param name="Pointn" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_concyclic" func="yes">
			<Overload retVal="" descr="Takes a set of 4 points as argument and tests if they are all on the same circle. Returns 1 if the points are all on the same circle and 0 otherwise.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
				<Param name="Point4)" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_conjugate" func="yes">
			<Overload retVal="" descr="Tests whether or not two points are conjugates for the given circle. Returns 1 if they are and 0 otherwise.">
				<Param name="Circle" />
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="[Point3]" />
			</Overload>
			<Overload retVal="" descr="Tests whether or not two lines are conjugates for the given circle. Returns 1 if they are and 0 otherwise.">
				<Param name="Line1" />
				<Param name="Line2" />
				<Param name="Line3" />
				<Param name="[Line4]" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_coplanar" func="yes">
			<Overload retVal="" descr="Tests if four points are in the same plane. Returns 1 if true or 0 if false.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
				<Param name="Point4" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_element" func="yes">
			<Overload retVal="" descr="Tests if a point is on a geometric object. Returns 1 if it is and 0 otherwise">
				<Param name="Point" />
				<Param name="Object" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_equilateral" func="yes">
			<Overload retVal="" descr="Takes three points and tests whether or not they are vertices of a single equilateral triangle. Returns 1 if they are and 0 otherwise.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_harmonic" func="yes">
			<Overload retVal="" descr="Tests whether or not four points are in a harmonic division or range. Returns 1 if they are or 0 otherwise.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
				<Param name="Point4" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_harmonic_circle_bundle" func="yes">
			<Overload retVal="" descr="Returns: 1 if the circles have a common external tangent, 2 if they have the same center, 3 if they are all the same circle, 0 if none of the above">
				<Param name="Circle1" />
				<Param name="Circle2" />
				<Param name="..." />
				<Param name="Circlen" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_harmonic_line_bundle" func="yes">
			<Overload retVal="" descr="Returns: 1 if the lines have a common point, 2 if they are all parallel, 3 if they are all the same line, 0 otherwise">
				<Param name="Line1" />
				<Param name="Line2" />
				<Param name="..." />
				<Param name="Linen" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_isosceles" func="yes">
			<Overload retVal="" descr="Takes three points and tests whether or not they are vertices of a single isosceles triangle. Returns 0 if they are not. &#x0a;If they are, returns the number order of the common point of the two sides of equal length (1, 2, or 3). Returns 4 if the three points form an equilateral triangle.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_orthogonal" func="yes">
			<Overload retVal="" descr="Tests whether or not the tangent lines at a point of intersection of two circles are orthogonal (perpendicular). Returns 1 if they are and 0 otherwise.">
				<Param name="Circle1" />
				<Param name="Circle2" />
			</Overload>
			<Overload retVal="" descr="Tests whether or not two lines are orthogonal (perpendicular). Returns 1 if they are and 0 otherwise.">
				<Param name="Line1" />
				<Param name="Line2" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_parallel" func="yes">
			<Overload retVal="" descr="Tests whether or not two lines are parallel. Returns 1 if they are and 0 otherwise.">
				<Param name="Line1" />
				<Param name="Line2" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_parallelogram" func="yes">
			<Overload retVal="" descr="Tests whether or not a set of four points are vertices of a parallelogram. Returns 0 if they are not. &#x0a;If they are, then returns 1 if they form only a parallelogram, 2 if they form a rhombus, 3 if they form a rectangle, and 4 if they form a square.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
				<Param name="Point4" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_perpendicular" func="yes">
			<Overload retVal="" descr="Similar to is_orthogonal. Tests whether or not two lines are perpendicular. Returns 1 if they are or 0 if they are not.">
				<Param name="Line1" />
				<Param name="Line2" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_rectangle" func="yes">
			<Overload retVal="" descr="Tests whether or not a set of four points are vertices of a rectangle. Returns 0 if they are not, 1 if they are, and 2 if they are vertices of a square.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
				<Param name="Point4" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_rhombus" func="yes">
			<Overload retVal="" descr="Tests whether or not a set of four points are vertices of a rhombus. Returns: 0 if they are not, 1 if they are, 2 if they are vertices of a square">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
				<Param name="Point4" />
			</Overload>
		</KeyWord>
		<KeyWord name="is_square" func="yes">
			<Overload retVal="" descr="Tests whether or not a set of four points are vertices of a square. Returns 1 if they are and 0 otherwise.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
				<Param name="Point4" />
			</Overload>
		</KeyWord>
		<KeyWord name="ismith" func="yes">
			<Overload retVal="" descr="Given Matrix_A, returns the Smith normal form of a matrix with coefficients in Z. Returns [U V B] such that U and V are invertible in Z, B is the diagonal, B[i,i] divides B[i+1,i+1] and B=U*A*V.">
				<Param name="Matrix_A" />
			</Overload>
		</KeyWord>
		<KeyWord name="isobarycenter" func="yes">
			<Overload retVal="" descr="Returns the hypothetical center of mass of a set of points. Works like barycenter but assumes all points have equal weight.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="&#x2026;" />
				<Param name="Pointn" />
			</Overload>
		</KeyWord>
		<KeyWord name="isopolygon" func="yes">
			<Overload retVal="" descr="Draws a regular polygon given the first two vertices and the number of sides, where the number of sides is greater than 1. If the number of sides is 2, then the segment is drawn. &#x0a;You can provide CAS variable names for storing the coordinates of the calculated points in the order they were created. The orientation of the polygon is counterclockwise.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Realn" />
			</Overload>
		</KeyWord>
		<KeyWord name="isosceles_triangle" func="yes">
			<Overload retVal="" descr="Draws an isosceles triangle defined by two of its vertices and an angle. The vertices define one of the two sides equal in length and the angle defines the angle between the two sides of equal length. &#x0a;Like equilateral_triangle, you have the option of storing the coordinates of the third point into a CAS variable.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Angle" />
				<Param name="[Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="isprime" func="yes">
			<Overload retVal="" descr="Returns true if the integer is prime; otherwise, returns false.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="ithprime" func="yes">
			<Overload retVal="" descr="Given an integer n, returns the nth prime number, where n is between 1 and 200,000.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="jacobi_symbol" func="yes">
			<Overload retVal="" descr="Returns the Jacobi symbol of the two given integers.">
				<Param name="Integer1" />
				<Param name="Integer2" />
			</Overload>
		</KeyWord>
		<KeyWord name="jordan" func="yes">
			<Overload retVal="" descr="Returns the list made by the matrix of passage and the Jordan form of a matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="ker" func="yes">
			<Overload retVal="" descr="Returns the kernel of a linear application of a matrix.">
				<Param name="Mtrx(M)" />
			</Overload>
		</KeyWord>
		<KeyWord name="l1norm" func="yes">
			<Overload retVal="" descr="Returns the L&#x00B9; norm (sum of the absolute values of the coordinates) of a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="l2norm" func="yes">
			<Overload retVal="" descr="Returns the L&#x00B2; norm (sqrt(x1&#x00B2;+x2&#x00B2;+&#x2026;xn&#x00B2;)) of a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="lagrange" func="yes">
			<Overload retVal="" descr="Given a matrix as argument, with the first row containing the abscissas and the second row containing the ordinates, returns the Lagrange polynomial of degree n-1 such that P(xk)=yk, for k=0, 1, &#x2026;, n-1.">
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Given a vector of abscissas and a vector of ordinates, returns the Lagrange polynomial for the points specified in the two vectors.">
				<Param name="[X1" />
				<Param name="X2, ... Xn]" />
				<Param name="[Y1" />
				<Param name="Y2" />
				<Param name="... Yn]" />
			</Overload>
		</KeyWord>
		<KeyWord name="laguerre" func="yes">
			<Overload retVal="" descr="Given an integer n, returns the Laguerre polynomial of degree n.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="laplace" func="yes">
			<Overload retVal="" descr="Returns the Laplace transform of an expression.">
				<Param name="Expr" />
				<Param name="[Var]" />
				<Param name="[LapVar]" />
			</Overload>
		</KeyWord>
		<KeyWord name="laplacian" func="yes">
			<Overload retVal="" descr="Returns the Laplacian of an expression with respect to a vector of variables.">
				<Param name="Expr" />
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="latex" func="yes">
			<Overload retVal="" descr="Returns the evaluated CAS expression written in Latex format.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="lcm" func="yes">
			<Overload retVal="" descr="Returns the lowest common multiple of two or more integers,.">
				<Param name="Intgr1" />
				<Param name="Intgr2" />
				<Param name="..." />
			</Overload>
			<Overload retVal="" descr="Returns the lowest common multiple of two or more polynomials of several variables.">
				<Param name="Poly1" />
				<Param name="Poly2" />
				<Param name="..." />
			</Overload>
			<Overload retVal="" descr="Returns the lowest common multiple of two or more rationals.">
				<Param name="Rational1" />
				<Param name="Rational2" />
				<Param name="..." />
			</Overload>
		</KeyWord>
		<KeyWord name="lcoeff" func="yes">
			<Overload retVal="" descr="Returns the coefficient of the term of highest degree of a polynomial expressed as a list of coefficients.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Returns the coefficient of the term of highest degree of a polynomial expressed in symbolic form.">
				<Param name="Poly" />
			</Overload>
			<Overload retVal="" descr="Returns the coefficient of the term of highest degree of a polynomial expressed as a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="legendre" func="yes">
			<Overload retVal="" descr="Given an integer n, returns the Legendre polynomial of degree n.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="legendre_symbol" func="yes">
			<Overload retVal="" descr="Given two integers, returns the Legendre symbol of the second integer, using the Legendre polynomial whose degree is the first integer.">
				<Param name="Integer1" />
				<Param name="[Integer2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="length" func="yes">
			<Overload retVal="" descr="Returns the length of a list.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Returns the length of a set of objects.">
				<Param name="Object1" />
			</Overload>
			<Overload retVal="" descr="Returns the length of a string.">
				<Param name="String" />
			</Overload>
		</KeyWord>
		<KeyWord name="lgcd" func="yes">
			<Overload retVal="" descr="Returns the greatest common divisor of a set of integers.">
				<Param name="Integer1" />
				<Param name="Integer2" />
				<Param name="&#x2026;" />
			</Overload>
			<Overload retVal="" descr="Returns the greatest common divisor of a set of integers or polynomials, contained in a list.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Returns the greatest common divisor of a set of polynomials.">
				<Param name="Poly1" />
				<Param name="Poly2" />
				<Param name="&#x2026;" />
			</Overload>
			<Overload retVal="" descr="Returns the greatest common divisor of a set of integers or polynomials, contained in a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="limit" func="yes">
			<Overload retVal="" descr="Returns the limit (2-sided or 1-sided) of the given expression as the given variable approaches a value. &#x0a;The optional argument Dir indicates a two sided limit if 0, one sided from below if -1, and one sided from above if 1. &#x0a;If the fourth argument is not provided, the limit returned is bidirectional.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="Val" />
				<Param name="[Dir]" />
			</Overload>
		</KeyWord>
		<KeyWord name="lin" func="yes">
			<Overload retVal="" descr="Linearization of exponentials. Returns an expression with the exponentials linearized.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="linear_interpolate" func="yes">
			<Overload retVal="" descr="Makes a regular sample from a polygonal line defined by a two row matrix.">
				<Param name="Matrix" />
				<Param name="Xmin" />
				<Param name="Xmax" />
				<Param name="Xstep" />
			</Overload>
		</KeyWord>
		<KeyWord name="linear_regression" func="yes">
			<Overload retVal="" descr="Given a set of points, returns a vector containing the coefficients a and b of y=a*x+b, the line which best fits the set of points, represented by the elements in two lists.">
				<Param name="List1" />
				<Param name="List2" />
			</Overload>
			<Overload retVal="" descr="Given a set of points, returns a vector containing the coefficients a and b of y=a*x+b, the line which best fits the set of points, represented by the rows of a matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="linsolve" func="yes">
			<Overload retVal="" descr="Given a vector of linear equations and a corresponding vector of variables, returns the solution to the system of linear equations.">
				<Param name="[LinEq1, LinEq2, &#x2026; LinEqn]" />
				<Param name="[Var1, Var2, &#x2026;Varn]" />
			</Overload>
		</KeyWord>
		<KeyWord name="list2mat" func="yes">
			<Overload retVal="" descr="Given a list and an integer n, returns a matrix of n columns made by splitting a list into rows, each containing n terms. &#x0a;If the number of elements in the list is not divisible by n, then the matrix is completed with zeros.">
				<Param name="List" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="lname" func="yes">
			<Overload retVal="" descr="Returns a list of the variables in an expression.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="lncollect" func="yes">
			<Overload retVal="" descr="Rewrites an expression with the logarithms collected. Applies ln(a)+n*ln(b)=ln(a*b^n) where n is an integer.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="lnexpand" func="yes">
			<Overload retVal="" descr="Returns the expanded form of a logarithmic expression.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="locus" func="yes">
			<Overload retVal="" descr="Given a first point and a second point that is an element of (a point on) a geometric object, draws the locus of the first point as the second point traverses its object. &#x0a;The optional tstep statement can be used to control the default level of detail.">
				<Param name="Point" />
				<Param name="Element" />
				<Param name="[tstep=Value])" />
			</Overload>
		</KeyWord>
		<KeyWord name="log10" func="yes">
			<Overload retVal="" descr="Common logarithm (base 10). Returns the common logarithm of an expression.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="logarithmic_regression" func="yes">
			<Overload retVal="" descr="Given a set of points, returns a vector containing the coefficients a and b of y=a*ln(x)+b, the natural logarithmic function which best fits the set of points, given as the elements in two lists.">
				<Param name="List1" />
				<Param name="List2" />
			</Overload>
			<Overload retVal="" descr="Given a set of points, returns a vector containing the coefficients a and b of y=a*ln(x)+b, the natural logarithmic function which best fits the set of points, given as the rows of a matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="logb" func="yes">
			<Overload retVal="" descr="Given a real number a and an integer b, returns the logarithm of a in the base b.">
				<Param name="a" />
				<Param name="b" />
			</Overload>
		</KeyWord>
		<KeyWord name="logistic_regression" func="yes">
			<Overload retVal="" descr="Returns [y,y',C,y'max,xmax,R] where y is a logistic function (solution of y'/y=a*y+b), such that y(x0)=y0 and where [y'(x0),y'(x0+1)&#x2026;] is the best approximation of L.">
				<Param name="Lst(L)" />
				<Param name="Real(x0)" />
				<Param name="Real(y0)" />
			</Overload>
		</KeyWord>
		<KeyWord name="lvar" func="yes">
			<Overload retVal="" descr="Given an expression, returns a list of the functions of the expression which utilize variables, including occurrences of the variables themselves.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="mRow" func="yes">
			<Overload retVal="" descr="Given an expression, a matrix, and an integer n, multiplies row n of the matrix by the expression.">
				<Param name="Expr" />
				<Param name="Matrix" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="map" func="yes">
			<Overload retVal="" descr="There are two uses for this function, whose second argument is always a mapping of a variable onto an expression.">
				<Param name="Matrix" />
				<Param name="Var&#x2192;Function" />
			</Overload>
			<Overload retVal="" descr="There are two uses for this function, whose second argument is always a mapping of a variable onto an expression.">
				<Param name="Matrix" />
				<Param name="Var&#x2192;Test" />
			</Overload>
		</KeyWord>
		<KeyWord name="mat2list" func="yes">
			<Overload retVal="" descr="Returns a list containing the elements of the given matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="matpow" func="yes">
			<Overload retVal="" descr="Calculates the n power of a matrix by use of the Jordan normal form.">
				<Param name="Matrix" />
				<Param name="Int(n)" />
			</Overload>
		</KeyWord>
		<KeyWord name="maxnorm" func="yes">
			<Overload retVal="" descr="Returns the l&#x221E; norm (the maximum of the absolute values of the coordinates) of a matrix.">
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Returns the l&#x221E; norm (the maximum of the absolute values of the coordinates) of a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="mean" func="yes">
			<Overload retVal="" descr="Returns the arithmetic mean of a list (with an optional list as a list of weights).">
				<Param name="List1" />
				<Param name="[List2]" />
			</Overload>
			<Overload retVal="" descr="Returns the arithmetic mean of the columns of the matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="median" func="yes">
			<Overload retVal="" descr="Returns the median of a list or vector (with an optional list as a list of weights).">
				<Param name="List1" />
				<Param name="[List2]" />
			</Overload>
			<Overload retVal="" descr="Returns the medians of the columns of the matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="median_line" func="yes">
			<Overload retVal="" descr="Given three points that define a triangle, draws the median of the triangle that passes through the first point and contains the midpoint of the segment defined by the other two points. &#x0a;In CAS view, returns the equation of the median line.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="member" func="yes">
			<Overload retVal="" descr="Given a list and an element, returns the index of the first occurrence of the element in the list. If the element does not appear in the list, returns 0. &#x0a;Similar to contains, except that the element comes first in the argument order.">
				<Param name="Element" />
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Given a vector and an element, returns the index of the first occurrence of the element in the vector. If the element does not appear in the vector, returns 0. &#x0a;Similar to contains, except that the element comes first in the argument order.">
				<Param name="Element" />
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="midpoint" func="yes">
			<Overload retVal="" descr="Returns the midpoint of a segment, given two points that define a segment. The segment need not actually be drawn.">
				<Param name="Point1" />
				<Param name="Point2" />
			</Overload>
			<Overload retVal="" descr="Returns the midpoint of a segment.">
				<Param name="Segment" />
			</Overload>
		</KeyWord>
		<KeyWord name="mkisom" func="yes">
			<Overload retVal="" descr="Returns the matrix of an isometry given by its proper elements.">
				<Param name="Vect" />
				<Param name="(Sign(1) or -1)" />
			</Overload>
		</KeyWord>
		<KeyWord name="modgcd" func="yes">
			<Overload retVal="" descr="Uses the modular algorithm to return the greatest common divisor of two polynomials.">
				<Param name="Poly1" />
				<Param name="Poly2" />
			</Overload>
		</KeyWord>
		<KeyWord name="mult_c_conjugate" func="yes">
			<Overload retVal="" descr="If the given complex expression has a complex denominator, returns the expression after both the numerator and the denominator have been multiplied by the complex conjugate of the denominator. &#x0a;If the given complex expression does not have a complex denominator, returns the expression after both the numerator and the denominator have been multiplied by the complex conjugate of the numerator.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="mult_conjugate" func="yes">
			<Overload retVal="" descr="Takes an expression in which the numerator or the denominator contains a square root. &#x0a;If the denominator contains a square root, returns the expression after both the numerator and the denominator have been multiplied by the conjugate of the denominator. &#x0a;If the denominator does not contain a square root, returns the expression after both the numerator and the denominator have been multiplied by the conjugate of the numerator.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="nDeriv" func="yes">
			<Overload retVal="" descr="Given an expression, a variable of differentiation, and a real number h, returns an approximate value of the derivative of the expression, using f&#x2019;(x)=(f(x+h)&#x2013;f(x+h))/(2*h). &#x0a;Without a third argument, the value of h is set to 0.001.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="[Real]" />
			</Overload>
			<Overload retVal="" descr="Given an expression, a variable of differentiation, and an expression with that variable in place of h, returns an approximate value of the derivative of the expression, using f&#x2019;(x)=(f(x+h)&#x2013;f(x+h))/(2*h).">
				<Param name="Expr" />
				<Param name="Var1" />
				<Param name="Var2" />
			</Overload>
		</KeyWord>
		<KeyWord name="negbinomial" func="yes">
			<Overload retVal="" descr="Negative binomial probability density function. Computes the probability density of the negative binomial distribution at x given parameters n and k.">
				<Param name="n" />
				<Param name="k" />
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="negbinomial_cdf" func="yes">
			<Overload retVal="" descr="Cumulative negative binomial distribution function. Returns the lower-tail probability of the negative binomial probability density function for the value x, given parameters n and k.">
				<Param name="n" />
				<Param name="k" />
				<Param name="x" />
				<Param name="[x2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="negbinomial_icdf" func="yes">
			<Overload retVal="" descr="Inverse cumulative negative binomial distribution function. Returns the value x such that the negative binomial lower-tail probability of x, given parameters n and k, is p.">
				<Param name="n" />
				<Param name="k" />
				<Param name="p" />
			</Overload>
		</KeyWord>
		<KeyWord name="newton" func="yes">
			<Overload retVal="" descr="Uses Newton's method to estimate the root of a function, beginning with Guess and calculating Integer iterations. By default, Integer is 20.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="[Guess]" />
				<Param name="[Integer]" />
			</Overload>
		</KeyWord>
		<KeyWord name="nextprime" func="yes">
			<Overload retVal="" descr="Returns the smallest prime number greater than the argument.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="normal" func="yes">
			<Overload retVal="" descr="Returns the expanded irreducible form of an expression.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="normalize" func="yes">
			<Overload retVal="" descr="Given a complex number, returns it divided by its modulus. It is also an option for plotfield. &#x0a;In this case, the term comes last in the set of arguments and the result is the slopefield segments are given equal length.">
				<Param name="Complex" />
			</Overload>
			<Overload retVal="" descr="Given a vector, returns it divided by its l2 norm (where the l2 norm is the square root of the sum of the squares of the vector&#x2019;s coordinates).">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="numer" func="yes">
			<Overload retVal="" descr="For integers a and b, returns the numerator of the fraction a/b after simplification.">
				<Param name="a/b" />
			</Overload>
		</KeyWord>
		<KeyWord name="odd" func="yes">
			<Overload retVal="" descr="Returns 1 if the given integer is odd, otherwise returns 0.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="odesolve" func="yes">
			<Overload retVal="" descr="Ordinary Differential Equation solver. Solves an ordinary differential equation given by Expr, with variables declared in VectVar and initial conditions for those variables declared in VectInit. &#x0a;For example, odesolve(f(t,y),[t,y],[t0,y0],t1) returns the approximate solution of y'=f(t,y) for the variables t and y with initial conditions t=t0 and y=y0.">
				<Param name="Expr" />
				<Param name="VectVar" />
				<Param name="VectInit" />
				<Param name="FinalVal" />
				<Param name="[tstep=Val" />
				<Param name="curve]" />
			</Overload>
		</KeyWord>
		<KeyWord name="open_polygon" func="yes">
			<Overload retVal="" descr="Connects a set of points with line segments, in the given order, to produce a polygon. If the last point is the same as the first point, then the polygon is closed.">
				<Param name="point1" />
				<Param name="point2" />
				<Param name="&#x2026;" />
				<Param name="point1" />
			</Overload>
			<Overload retVal="" descr="Connects a set of points with line segments, in the given order, to produce a polygon. If the last point is not the same as the first point, then the polygon is open.">
				<Param name="point1" />
				<Param name="point2" />
				<Param name="&#x2026;" />
				<Param name="pointn" />
			</Overload>
		</KeyWord>
		<KeyWord name="order_size" func="yes">
			<Overload retVal="" descr="Returns the remainder (O term) of a series expansion: limit(x^a*order_size(x),x=0)=0 if a&gt;0">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="ordinate" func="yes">
			<Overload retVal="" descr="Returns the ordinate of a point.">
				<Param name="Point" />
			</Overload>
			<Overload retVal="" descr="Returns the y-length of a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="orthocenter" func="yes">
			<Overload retVal="" descr="Returns the orthocenter of a triangle; that is, the intersection of the three altitudes of a triangle. The argument can be either the name of a triangle or three non-collinear points that define a triangle. &#x0a;In the latter case, the triangle does not need to be drawn.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
			<Overload retVal="" descr="Returns the orthocenter of a triangle; that is, the intersection of the three altitudes of a triangle. The argument can be either the name of a triangle or three non-collinear points that define a triangle. &#x0a;In the latter case, the triangle does not need to be drawn.">
				<Param name="Triangle" />
			</Overload>
		</KeyWord>
		<KeyWord name="orthogonal" func="yes">
			<Overload retVal="" descr="orthogonal(A,line(B,C)) draws the orthogonal plane of line BC through point A.">
				<Param name="Point" />
				<Param name="Line" />
			</Overload>
			<Overload retVal="" descr="orthogonal(A,line(B,C)) draws the orthogonal plane of line BC through point A.">
				<Param name="Point" />
				<Param name="Plane" />
			</Overload>
		</KeyWord>
		<KeyWord name="pa2b2" func="yes">
			<Overload retVal="" descr="Takes a prime integer n congruent to 1 modulo 4 and returns [a,b] such that a&#x00B2;+b&#x00B2;=n.">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="pade" func="yes">
			<Overload retVal="" descr="Returns the Pade approximation of an expression; that is, a rational fraction P/Q such that P/Q=Expr mod x^(n+1) or mod n with degree&lt;p.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="Integern" />
				<Param name="Integerp" />
			</Overload>
		</KeyWord>
		<KeyWord name="parabola" func="yes">
			<Overload retVal="" descr="Draws a parabola, given a focus point and a directrix line, or the vertex of the parabola and a real number that represents the focal length">
				<Param name="Expr" />
			</Overload>
			<Overload retVal="" descr="Draws a parabola, given a focus point and a directrix line.">
				<Param name="Point" />
				<Param name="Line" />
			</Overload>
			<Overload retVal="" descr="Draws a parabola, given the vertex of the parabola and a real number that represents the focal length">
				<Param name="Point" />
				<Param name="Realk" />
			</Overload>
		</KeyWord>
		<KeyWord name="parallel" func="yes">
			<Overload retVal="" descr="Given a point and a line, returns the equation of the line through the point that is parallel to the given line.">
				<Param name="Point" />
				<Param name="Line" />
			</Overload>
		</KeyWord>
		<KeyWord name="parallelogram" func="yes">
			<Overload retVal="" descr="Draws a parallelogram given three of its vertices. The fourth point is calculated automatically but is not defined symbolically. &#x0a;As with most of the other polygon commands, you can store the fourth point&#x2019;s coordinates into a CAS variable. &#x0a;The orientation of the parallelogram is counterclockwise from the first point.">
				<Param name="Point1" />
				<Param name="Point2" />
				<Param name="Point3" />
			</Overload>
		</KeyWord>
		<KeyWord name="parameq" func="yes">
			<Overload retVal="" descr="Returns a parametric equation for a geometric object. The parametric equation is true for all complex numbers that represent points on the object.">
				<Param name="Obj" />
			</Overload>
		</KeyWord>
		<KeyWord name="part" func="yes">
			<Overload retVal="" descr="Returns the nth sub expression of an expression.">
				<Param name="Expr" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="partfrac" func="yes">
			<Overload retVal="" descr="Performs partial fraction decomposition on a fraction.">
				<Param name="RatFrac" />
			</Overload>
		</KeyWord>
		<KeyWord name="pcoeff" func="yes">
			<Overload retVal="" descr="Given a list or vector containing the roots of a polynomial, returns a vector containing the coefficients (in decreasing order) of the univariate polynomial having those roots.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Given a list or vector containing the roots of a polynomial, returns a vector containing the coefficients (in decreasing order) of the univariate polynomial having those roots.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="perimeterat" func="yes">
			<Overload retVal="" descr="Used in Symbolic view of the Geometry app. Displays the circumference of a circle. The measure is displayed, with a label, at the given point in Plot view.">
				<Param name="circle" />
				<Param name="point" />
			</Overload>
			<Overload retVal="" descr="Used in Symbolic view of the Geometry app. Displays the perimeter of a polygon. The measure is displayed, with a label, at the given point in Plot view.">
				<Param name="polygon" />
				<Param name="point" />
			</Overload>
		</KeyWord>
		<KeyWord name="perpen_bisector" func="yes">
			<Overload retVal="" descr="Draws the perpendicular bisector of a segment, defined by its two endpoints.">
				<Param name="Point1" />
				<Param name="Point2" />
			</Overload>
			<Overload retVal="" descr="Draws the perpendicular bisector of a segment, defined by its name.">
				<Param name="Segment" />
			</Overload>
		</KeyWord>
		<KeyWord name="plotinequation" func="yes">
			<Overload retVal="" descr="Plots the graph of the solution of inequations with two variables.">
				<Param name="Expr" />
				<Param name="[x=xrange, y=yrange]" />
				<Param name="[xstep]" />
				<Param name="[ystep]" />
			</Overload>
		</KeyWord>
		<KeyWord name="plotparam" func="yes">
			<Overload retVal="" descr="Used in the Geometry app Symbolic view. Takes a complex expression in one variable and an interval for that variable as arguments. &#x0a;Interprets the complex expression f(t)+i*g(t) as x=f(t) and y=g(t) and plots the parametric equation over the interval specified in the second argument.">
				<Param name="f(Var)+i*g(Var)" />
				<Param name="Var= Interval" />
				<Param name="[tstep=Value]" />
			</Overload>
		</KeyWord>
		<KeyWord name="plotpolar" func="yes">
			<Overload retVal="" descr="Used in the Geometry app to draw a polar graph in Plot view.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="Min" />
				<Param name="Max" />
				<Param name="[Step]" />
			</Overload>
			<Overload retVal="" descr="Used in the Geometry app to draw a polar graph in Plot view.">
				<Param name="Expr" />
				<Param name="Var=Interval" />
				<Param name="[Step]" />
			</Overload>
		</KeyWord>
		<KeyWord name="plotseq" func="yes">
			<Overload retVal="" descr="Used in the Geometry app Symbolic view. Given an expression in x and a list containing three values, draws the line y=x, &#x0a;the plot of the function defined by the expression over the domain defined by the interval between the last two values, &#x0a;and draws the cobweb plot for the first n terms of the sequence defined recursively by the expression (starting at the first value).">
				<Param name="f(Var)" />
				<Param name="Var={Start" />
				<Param name="Xmin" />
				<Param name="Xmax}" />
				<Param name="Integern" />
			</Overload>
		</KeyWord>
		<KeyWord name="point" func="yes">
			<Overload retVal="" descr="Creates a point, given the coordinates of the point. Each coordinate may be a value or an expression involving variables or measurements on other objects in the geometric construction.">
				<Param name="Expr1" />
				<Param name="Expr2" />
			</Overload>
			<Overload retVal="" descr="Creates a point, given the coordinates of the point. Each coordinate may be a value or an expression involving variables or measurements on other objects in the geometric construction.">
				<Param name="Real1" />
				<Param name="Real2" />
			</Overload>
		</KeyWord>
		<KeyWord name="point2d" func="yes">
			<Overload retVal="" descr="Randomly re-distributes a set of points such that, for each point, x is in the interval [-5, 5] and y is in the interval [-5, 5]. &#x0a;Any further movement of one of the points will randomly re-distribute all of the points.">
				<Param name="point1" />
				<Param name="point2" />
				<Param name="&#x2026;" />
				<Param name="pointn" />
			</Overload>
		</KeyWord>
		<KeyWord name="polar" func="yes">
			<Overload retVal="" descr="Returns the polar line of the given point as pole with respect to the given circle.">
				<Param name="Circle" />
				<Param name="Complex" />
			</Overload>
			<Overload retVal="" descr="Returns the polar line of the given point as pole with respect to the given circle.">
				<Param name="Circle" />
				<Param name="Point" />
			</Overload>
		</KeyWord>
		<KeyWord name="polar_coordinates" func="yes">
			<Overload retVal="" descr="Returns a vector containing the polar coordinates of a point.">
				<Param name="Point" />
			</Overload>
		</KeyWord>
		<KeyWord name="polar_point" func="yes">
			<Overload retVal="" descr="Given the radius and angle of a point in polar form, returns the point with rectangular coordinates in complex form.">
				<Param name="Radius" />
				<Param name="Angle" />
			</Overload>
		</KeyWord>
		<KeyWord name="pole" func="yes">
			<Overload retVal="" descr="Returns the pole of the given line with respect to the given circle.">
				<Param name="Circle" />
				<Param name="Line" />
			</Overload>
		</KeyWord>
		<KeyWord name="polygonplot" func="yes">
			<Overload retVal="" descr="Used in the Geometry app Symbolic view. Given an n &#x00D7; m matrix, draws and connects the points (xk, yk), where xk is the element in row k and column 1, and yk is the element in row k and column j (with j fixed for k=1 to n rows). &#x0a;Thus, each column pairing generates its own figure, resulting in m&#x2013;1 figures.">
				<Param name="Mtrx" />
			</Overload>
		</KeyWord>
		<KeyWord name="polygonscatterplot" func="yes">
			<Overload retVal="" descr="Used in the Geometry app Symbolic view. Given an n &#x00D7; m matrix, draws and connects the points (xk, yk), where xk is the element in row k and column 1, and yk is the element in row k and column j (with j fixed for k=1 to n rows). &#x0a;Thus, each column pairing generates its own figure, resulting in m-&#x2013;1 figures.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="polynomial_regression" func="yes">
			<Overload retVal="" descr="Given a set of points defined by two lists, and a positive integer n, returns a vector containing the coefficients of the nth order polynomial which best approximates the given points.">
				<Param name="List1" />
				<Param name="List2" />
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Given a set of points defined by a matrix, and a positive integer n, returns a vector containing the coefficients of the nth order polynomial which best approximates the given points.">
				<Param name="Matrix" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="potential" func="yes">
			<Overload retVal="" descr="Returns a function whose gradient is the vector field defined by a vector and a vector of variables.">
				<Param name="Vector1" />
				<Param name="Vector2" />
			</Overload>
		</KeyWord>
		<KeyWord name="power_regression" func="yes">
			<Overload retVal="" descr="Given a set of points defined by two lists, returns a vector containing the coefficients m and b of y=b*x^m, the monomial which best approximates the given points.">
				<Param name="List1" />
				<Param name="List2" />
			</Overload>
			<Overload retVal="" descr="Given a set of points defined by a matrix, returns a vector containing the coefficients m and b of y=b*x^m, the monomial which best approximates the given points.">
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Given a set of points defined by two vectors, returns a vector containing the coefficients m and b of y=b*x^m, the monomial which best approximates the given points.">
				<Param name="Vector1" />
				<Param name="Vector2" />
			</Overload>
		</KeyWord>
		<KeyWord name="powerpc" func="yes">
			<Overload retVal="" descr="Given a circle and a point, returns the difference between the square of the distance from the point to the circle&#x2019;s center and the square of the circle&#x2019;s radius.">
				<Param name="Circle" />
				<Param name="Point" />
			</Overload>
		</KeyWord>
		<KeyWord name="prepend" func="yes">
			<Overload retVal="" descr="Adds an element to the beginning of a list.">
				<Param name="List" />
				<Param name="Element" />
			</Overload>
			<Overload retVal="" descr="Adds an element to the beginning of a vector.">
				<Param name="Vector" />
				<Param name="Element" />
			</Overload>
		</KeyWord>
		<KeyWord name="primpart" func="yes">
			<Overload retVal="" descr="Returns a polynomial divided by the greatest common divisor of its coefficients.">
				<Param name="Poly, [Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="product" func="yes">
			<Overload retVal="" descr="With an expression as the first argument, returns the product of solutions when the variable in the expression goes from a minimum value to a maximum value by a given step. &#x0a;If no step is provided, it is taken as 1.">
				<Param name="Expr" />
				<Param name="[Var]" />
				<Param name="[Min]" />
				<Param name="[Max]" />
				<Param name="[Step]" />
			</Overload>
			<Overload retVal="" descr="With a list as the first argument, returns the product of the values in the list.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="With a matrix as the first argument, returns the element-by-element product of the matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="propfrac" func="yes">
			<Overload retVal="" descr="Returns a fraction or rational fraction A/B simplified to Q+R/B with R&lt;B (or with the degree of R less than the degree of B).">
				<Param name="Fraction" />
			</Overload>
			<Overload retVal="" descr="Returns a fraction or rational fraction A/B simplified to Q+R/B with R&lt;B (or with the degree of R less than the degree of B).">
				<Param name="RatFrac" />
			</Overload>
		</KeyWord>
		<KeyWord name="ptayl" func="yes">
			<Overload retVal="" descr="Given a polynomial P and a value a, returns the Taylor polynomial Q such as P(x)=Q(x-a)">
				<Param name="Poly" />
				<Param name="Value" />
				<Param name="[Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="purge" func="yes">
			<Overload retVal="" descr="Unassigns a variable name in CAS view. For example, if f is defined, then purge(f) deletes that definition and returns f to its symbolic state.">
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="q2a" func="yes">
			<Overload retVal="" descr="Given a quadratic form and a vector of variables, returns the symmetric matrix of the quadratic form with respect to the given variables.">
				<Param name="QuadExpr" />
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="quantile" func="yes">
			<Overload retVal="" descr="Given a list, and a quantile value between 0 and 1, returns the corresponding quantile of the elements of the list.">
				<Param name="List" />
				<Param name="Value" />
			</Overload>
			<Overload retVal="" descr="Given a vector, and a quantile value between 0 and 1, returns the corresponding quantile of the elements of the vector.">
				<Param name="Vector" />
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="quartile1" func="yes">
			<Overload retVal="" descr="Given a list, returns the first quartile of the elements of the list.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Given a matrix, returns the first quartile of the elements of the columns of the matrix.">
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Given a vector, returns the first quartile of the elements of the vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="quartile3" func="yes">
			<Overload retVal="" descr="Given a list, returns the third quartile of the elements of the list.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Given a matrix, returns the third quartile of the columns of the matrix.">
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Given a vector, returns the third quartile of the elements of the list or vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="quartiles" func="yes">
			<Overload retVal="" descr="Returns a matrix containing the minimum, first quartile, median, third quartile, and maximum of the elements of a list.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Returns a matrix containing the minimum, first quartile, median, third quartile, and maximum of the elements of the columns of the matrix.">
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Returns a matrix containing the minimum, first quartile, median, third quartile, and maximum of the elements of a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="quorem" func="yes">
			<Overload retVal="" descr="Returns the Euclidean quotient and remainder of the quotient of 2 polynomials, each expressed in symbolic form directly.">
				<Param name="Poly1" />
				<Param name="Poly2" />
			</Overload>
			<Overload retVal="" descr="Returns the Euclidean quotient and remainder of the quotient of 2 polynomials, each expressed as a vector of coefficients, returning a similar vector of the quotient and a vector of the remainder.">
				<Param name="Vector1" />
				<Param name="Vector2" />
			</Overload>
		</KeyWord>
		<KeyWord name="radical_axis" func="yes">
			<Overload retVal="" descr="Returns the line whose points all have the same powerpc values for the two given circles.">
				<Param name="Circle1" />
				<Param name="Circle2" />
			</Overload>
		</KeyWord>
		<KeyWord name="randbinomial" func="yes">
			<Overload retVal="" descr="Returns a random integer with binomial distribution given n trials, each with a probability of success of p.">
				<Param name="n" />
				<Param name="p" />
			</Overload>
		</KeyWord>
		<KeyWord name="randchisquare" func="yes">
			<Overload retVal="" descr="Returns a random number with &#x03C7;&#x00B2; distribution given n degrees of freedom.">
				<Param name="n" />
			</Overload>
		</KeyWord>
		<KeyWord name="randexp" func="yes">
			<Overload retVal="" descr="Given a positive real number, returns a random real according to an exponential distribution with real a&gt;0.">
				<Param name="Real" />
			</Overload>
		</KeyWord>
		<KeyWord name="randfisher" func="yes">
			<Overload retVal="" descr="Returns a random number with F distribution given numerator n and denominator d degrees of freedom.">
				<Param name="n" />
				<Param name="d" />
			</Overload>
		</KeyWord>
		<KeyWord name="randgeometric" func="yes">
			<Overload retVal="" descr="Returns a random integer with geometric distribution given given probability p.">
				<Param name="p" />
			</Overload>
		</KeyWord>
		<KeyWord name="randnorm" func="yes">
			<Overload retVal="" descr="Returns a random real number from the normal distribution N(mu, sigma).">
				<Param name="mu" />
				<Param name="sigma" />
			</Overload>
		</KeyWord>
		<KeyWord name="randperm" func="yes">
			<Overload retVal="" descr="Given a positive integer, returns a random permutation of [0,1,2,&#x2026;,n&#x2013;1].">
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="randpoisson" func="yes">
			<Overload retVal="" descr="Returns a random integer with Poisson distribution given k.">
				<Param name="k" />
			</Overload>
		</KeyWord>
		<KeyWord name="randstudent" func="yes">
			<Overload retVal="" descr="Returns a random number with Student&#x2019;s t distribution given n degrees of freedom.">
				<Param name="n" />
			</Overload>
		</KeyWord>
		<KeyWord name="ranm" func="yes">
			<Overload retVal="" descr="Returns a vector of size n or a n*m matrix that contains random integers in the range - 99 through 99 with uniform distribution or contains random numbers in a given interval or according to the given Distribution.">
				<Param name="Integern" />
				<Param name="[Integerm]" />
				<Param name="[Interval or Distribution]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ratnormal" func="yes">
			<Overload retVal="" descr="Rewrites an expression as an irreducible rational fraction.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="reciprocation" func="yes">
			<Overload retVal="" descr="Given a circle and a vector of objects that are either points or lines, returns a vector where each point is replaced with its polar line and each line is replaced with its pole, with respect to the circle.">
				<Param name="Circle" />
				<Param name="[Obj1" />
				<Param name="Obj2, ...Objn]" />
			</Overload>
		</KeyWord>
		<KeyWord name="rectangular_coordinates" func="yes">
			<Overload retVal="" descr="Given a vector containing the polar coordinates of a point, returns a vector containing the rectangular coordinates of the point.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="reduced_conic" func="yes">
			<Overload retVal="" descr="Takes a conic expression and returns a vector with the following items: The origin of the conic, The matrix of a basis in which the conic is reduced, 0 or 1 (0 if the conic is degenerate), &#x0a;The reduced equation of the conic, A vector of the conic&#x2019;s parametric equations">
				<Param name="Expr" />
				<Param name="[Vector]" />
			</Overload>
		</KeyWord>
		<KeyWord name="ref" func="yes">
			<Overload retVal="" descr="Performs Gaussian reduction of a matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="remove" func="yes">
			<Overload retVal="" descr="Given a vector or list, removes the values that make Test true and returns the resulting vector or list.">
				<Param name="Test" />
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Given a vector or list, removes the occurrences of Value and returns the resulting vector or list.">
				<Param name="Value" />
				<Param name="List" />
			</Overload>
		</KeyWord>
		<KeyWord name="reorder" func="yes">
			<Overload retVal="" descr="Given an expression and a vector of variables, reorders the variables in the expression according to the order given in the vector.">
				<Param name="Expr" />
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="residue" func="yes">
			<Overload retVal="" descr="Returns the residue of an expression at a value.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="Value" />
			</Overload>
		</KeyWord>
		<KeyWord name="restart" />
		<KeyWord name="resultant" func="yes">
			<Overload retVal="" descr="Returns the resultant (the determinant of the Sylvester matrix) of two polynomials.">
				<Param name="Poly1" />
				<Param name="Poly2" />
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="revlist" func="yes">
			<Overload retVal="" descr="Reverses the order of the elements in a list.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Reverses the order of the elements in a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="rhombus" func="yes">
			<Overload retVal="" descr="Used in the Geometry app. Draws a rhombus, given two points and an angle. As with many of the other polygon commands, you can specify optional CAS variable names for storing the coordinates of the other two vertices as points.">
				<Param name="point1" />
				<Param name="point2" />
				<Param name="angle" />
			</Overload>
		</KeyWord>
		<KeyWord name="romberg" func="yes">
			<Overload retVal="" descr="Uses Romberg&#x2019;s method to return the approximate value of a definite integral.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="Val1" />
				<Param name="Val2" />
			</Overload>
		</KeyWord>
		<KeyWord name="row" func="yes">
			<Overload retVal="" descr="Given a matrix and an integer n, returns the row n of the matrix.">
				<Param name="Matrix" />
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Given a matrix and an interval, returns a vector containing the rows of the matrix indicated by the interval.">
				<Param name="Matrix" />
				<Param name="Interval" />
			</Overload>
		</KeyWord>
		<KeyWord name="rowAdd" func="yes">
			<Overload retVal="" descr="Given a matrix and two integers, returns the matrix obtained from the given matrix after the row indicated by the second integer is replaced by the sum of the rows indicated by the two integers.">
				<Param name="Matrix" />
				<Param name="Integer1" />
				<Param name="Integer2" />
			</Overload>
		</KeyWord>
		<KeyWord name="rowDim" func="yes">
			<Overload retVal="" descr="Returns the number of rows of a matrix">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="rowNorm" func="yes">
			<Overload retVal="" descr="Finds the maximum value (over all rows of the matrix) for the sums of the absolute values of all elements in a row.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="rowSwap" func="yes">
			<Overload retVal="" descr="Given a matrix and two integers, returns the matrix obtained from the given matrix after swapping the two rows indicated by the two integers.">
				<Param name="Matrix" />
				<Param name="Integer1" />
				<Param name="Integer2" />
			</Overload>
		</KeyWord>
		<KeyWord name="rref" func="yes">
			<Overload retVal="" descr="Reduced Row-Echelon Form. Changes a rectangular matrix to its reduced row-echelon form.">
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Reduced Row-Echelon Form. Changes a rectangular matrix to its reduced row-echelon form.">
				<Param name="Matrix" />
				<Param name="[Integer" />
				<Param name="Option]" />
			</Overload>
		</KeyWord>
		<KeyWord name="rsolve" func="yes">
			<Overload retVal="" descr="Given an expression defining a recurrence relation, a variable, and an initial condition, returns the closed form solution (if possible) of the recurrent sequence.">
				<Param name="Expr" />
				<Param name="Var" />
				<Param name="Condition" />
			</Overload>
			<Overload retVal="" descr="Given three lists, each containing multiple items of an expression defining a recurrence relation, a variable, and an initial condition, solves the system of recurrent sequences.">
				<Param name="List1" />
				<Param name="List2" />
				<Param name="List3" />
			</Overload>
		</KeyWord>
		<KeyWord name="select" func="yes">
			<Overload retVal="" descr="Given a test expression in a single variable and a list, tests each element in the list or vector and returns a list containing the elements that satisfy the test.">
				<Param name="Test" />
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Given a test expression in a single variable and a vector, tests each element in the list or vector and returns a vector containing the elements that satisfy the test.">
				<Param name="Test" />
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="seq" func="yes">
			<Overload retVal="" descr="Given an expression and an integer n, returns a list with the expression repeated n times.">
				<Param name="Expr" />
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Given an expression and a variable defined over an interval, returns a vector containing the sequence obtained when the expression is evaluated within the given interval using a step of 1.">
				<Param name="Expr" />
				<Param name="Var=Interval" />
			</Overload>
			<Overload retVal="" descr="Given an expression, a variable defined over an interval, and a step value, returns a vector containing the sequence obtained when the expression is evaluated within the given interval using the given step.">
				<Param name="Expr" />
				<Param name="Var=Interval" />
				<Param name="Step" />
			</Overload>
		</KeyWord>
		<KeyWord name="seqsolve" func="yes">
			<Overload retVal="" descr="Similar to rsolve. Given an expression defining a recurrence relation in terms of n and/or the previous term (x), followed by a vector of variables and an initial condition for x (the 0th term), &#x0a;returns the closed form solution (if possible) for the recurrent sequence.">
				<Param name="Expr" />
				<Param name="Vector" />
				<Param name="Condition" />
			</Overload>
			<Overload retVal="" descr="Similar to rsolve. Given three lists, each containing multiple items of an expression defining a recurrence relation in terms of n and/or the previous term (x), &#x0a;followed by a vector of variables and an initial condition for x (the 0th term), solves the system of recurrent sequences.">
				<Param name="List1" />
				<Param name="List2" />
				<Param name="List3" />
			</Overload>
		</KeyWord>
		<KeyWord name="shift" func="yes">
			<Overload retVal="" descr="Given an integer and a second integer n, performs a bitwise shift on the first integer; the shift is left if n&gt;0 and right if n&lt;0.">
				<Param name="Integer1" />
				<Param name="Integer2" />
			</Overload>
			<Overload retVal="" descr="Given a list, shifts the elements of the list 1 place to the left. Elements leaving the list from one side are replaced by 0 on the other side.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Given a list and an integer n, shifts the elements of the list n places to the left if n&gt;0 or to the right if n&lt;0. Elements leaving the list from one side are replaced by 0 on the other side.">
				<Param name="List" />
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Given a vector, shifts the elements of the vector 1 place to the left. Elements leaving the vector from one side are replaced by 0 on the other side.">
				<Param name="Vector" />
			</Overload>
			<Overload retVal="" descr="Given a vector and an integer n, shifts the elements of the vector n places to the left if n&gt;0 or to the right if n&lt;0. Elements leaving the vector from one side are replaced by 0 on the other side.">
				<Param name="Vector" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="shift_phase" func="yes">
			<Overload retVal="" descr="Returns the result of applying a phase shift of &#x03C0;/2 to a trigonometric expression.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="signature" func="yes">
			<Overload retVal="" descr="Returns the signature of a permutation given as a vector.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="simult" func="yes">
			<Overload retVal="" descr="Returns the solution to a system of linear equations or several systems of linear equations presented in matrix form. &#x0a;In the case of one system of linear equations, takes a matrix of coefficients and a column matrix of constants, and returns the column matrix of the solution.">
				<Param name="Matrix1" />
				<Param name="Matrix2" />
			</Overload>
		</KeyWord>
		<KeyWord name="sincos" func="yes">
			<Overload retVal="" descr="Returns an expression with the complex exponentials rewritten in terms of sine and cosine.">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="single_inter" func="yes">
			<Overload retVal="" descr="Returns the intersection of Curve1 and Curve2 that is closest to Point. In Plot view, this command will prompt for two curves. &#x0a;After that, a point will appear; move this point to the intersection desired and press Enter. You can move the point later to change intersections if you wish.">
				<Param name="Curve1" />
				<Param name="Curve2" />
				<Param name="[Point]" />
			</Overload>
		</KeyWord>
		<KeyWord name="slope" func="yes">
			<Overload retVal="" descr="Given a line, returns the slope of the line.">
				<Param name="Line" />
			</Overload>
			<Overload retVal="" descr="Given two points that define a line, returns the slope of the line.">
				<Param name="Point1" />
				<Param name="Point2" />
			</Overload>
		</KeyWord>
		<KeyWord name="slopeat" func="yes">
			<Overload retVal="" descr="Used in Symbolic view of the Geometry app. Displays the slope of a line. The measure is displayed, with a label, at the given point in Plot view.">
				<Param name="Line" />
				<Param name="Point" />
			</Overload>
			<Overload retVal="" descr="Used in Symbolic view of the Geometry app. Displays the slope of a ray. The measure is displayed, with a label, at the given point in Plot view.">
				<Param name="Ray" />
				<Param name="Point" />
			</Overload>
			<Overload retVal="" descr="Used in Symbolic view of the Geometry app. Displays the slope of a segment. The measure is displayed, with a label, at the given point in Plot view.">
				<Param name="Segment" />
				<Param name="Point" />
			</Overload>
		</KeyWord>
		<KeyWord name="sort" func="yes">
			<Overload retVal="" descr="Sorts a list of a sequence of objects. If the list or sequence contains numbers, then sorting is done in increasing order. &#x0a;If the list or sequence contains expressions, then the sorting is done in increasing order of numerical values, sums, and products, in increasing exponential order.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Sorts a list of a sequence of objects. If the list or sequence contains numbers, then sorting is done in increasing order. &#x0a;If the list or sequence contains expressions, then the sorting is done in increasing order of numerical values, sums, and products, in increasing exponential order.">
				<Param name="Obj1" />
				<Param name="Obj2" />
				<Param name="..." />
			</Overload>
		</KeyWord>
		<KeyWord name="spline" func="yes">
			<Overload retVal="" descr="Given two lists (one for the x-values and one for the y-values), as well as a variable and an integer degree, returns the natural spline through the points given by the two lists. &#x0a;The polynomials in the spline are in terms of the given variable and are of the given degree.">
				<Param name="ListX" />
				<Param name="ListY" />
				<Param name="Var" />
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Given two vectors (one for the x-values and one for the y-values), as well as a variable and an integer degree, returns the natural spline through the points given by the two vectors. &#x0a;The polynomials in the spline are in terms of the given variable and are of the given degree.">
				<Param name="VectorX" />
				<Param name="VectorY" />
				<Param name="Var" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="sqrfree" func="yes">
			<Overload retVal="" descr="Returns a polynomial factorized as a product of powers of coprime factors where each factor has roots of multiplicity 1">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="sqrt" func="yes">
			<Overload retVal="" descr="Returns the square root of Expr">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="stddev" func="yes">
			<Overload retVal="" descr="Returns the standard deviation of the elements of a list. The optional second list is a list of weights.">
				<Param name="List1" />
				<Param name="[List2]" />
			</Overload>
			<Overload retVal="" descr="Returns the standard deviation of the elements of a list of the standard deviations of the columns of a matrix.">
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Returns the standard deviation of the elements of a vector. The optional second list is a list of weights.">
				<Param name="Vector1" />
				<Param name="[Vector2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="stddevp" func="yes">
			<Overload retVal="" descr="Returns the population standard deviation of the elements of a list. The optional second list is a list of weights.">
				<Param name="List1" />
				<Param name="[List2]" />
			</Overload>
			<Overload retVal="" descr="Returns the population standard deviation of a list of the population standard deviations of the columns of a matrix.">
				<Param name="Matrix" />
			</Overload>
			<Overload retVal="" descr="Returns the population standard deviation of the elements of a vector. The optional second list is a list of weights.">
				<Param name="Vector 1" />
				<Param name="Vector2" />
			</Overload>
		</KeyWord>
		<KeyWord name="sto" func="yes">
			<Overload retVal="" descr="Stores the object given as first argument in the variable given as second argument.">
				<Param name="Obj" />
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="sturm" func="yes">
			<Overload retVal="" descr="Returns the Sturm sequence corresponding to a polynomial.">
				<Param name="Poly" />
			</Overload>
			<Overload retVal="" descr="Returns the Sturm sequence corresponding to the number of sign changes of a polynomial for the variable in the interval (a,b].">
				<Param name="Poly" />
				<Param name="Var" />
				<Param name="Complexa" />
				<Param name="Complexb" />
			</Overload>
		</KeyWord>
		<KeyWord name="sturmseq" func="yes">
			<Overload retVal="" descr="Returns the Sturm sequence corresponding to a polynomial.">
				<Param name="Poly" />
				<Param name="[Var]" />
			</Overload>
			<Overload retVal="" descr="Returns the Sturm sequence corresponding to a rational fraction.">
				<Param name="RatFrac" />
				<Param name="[Var]" />
			</Overload>
		</KeyWord>
		<KeyWord name="subMat" func="yes">
			<Overload retVal="" descr="Extracts from a matrix a sub matrix whose diagonal is defined by four integers. &#x0a;The first two integers define the row and column of the first element and the last two integers define the row and column of the last element of the sub matrix.">
				<Param name="Matrix" />
				<Param name="Int1" />
				<Param name="Int2" />
				<Param name="Int3" />
				<Param name="Int4" />
			</Overload>
		</KeyWord>
		<KeyWord name="suppress" func="yes">
			<Overload retVal="" descr="Given a list and a counting number n, deletes the nth element in the list and returns the result.">
				<Param name="List" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="surd" func="yes">
			<Overload retVal="" descr="Given an expression and an integer n, returns the expression raised to the power 1/n.">
				<Param name="Expr" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="sylvester" func="yes">
			<Overload retVal="" descr="Returns the Sylvester matrix of two polynomials">
				<Param name="Poly" />
				<Param name="Poly" />
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="table" func="yes">
			<Overload retVal="" descr="Defines an array where the index are strings or real numbers">
				<Param name="SeqEqual(index=value)" />
			</Overload>
		</KeyWord>
		<KeyWord name="tail" func="yes">
			<Overload retVal="" descr="Given a list, returns a vector with the first element deleted.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Given a sequence of objects, returns a vector with the first element deleted.">
				<Param name="Obj1" />
				<Param name="Obj2" />
				<Param name="..." />
			</Overload>
			<Overload retVal="" descr="Given a string, returns a vector with the first element deleted.">
				<Param name="String" />
			</Overload>
			<Overload retVal="" descr="Given a vector, returns a vector with the first element deleted.">
				<Param name="Vector" />
			</Overload>
		</KeyWord>
		<KeyWord name="tan2cossin2" func="yes">
			<Overload retVal="" descr="Returns an expression with tan(x) rewritten as (1&#x2013;cos(2*x))/sin(2*x).">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="tan2sincos2" func="yes">
			<Overload retVal="" descr="Returns an expression with tan(x) rewritten as sin(2*x)/(1+cos(2*x)).">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="transpose" func="yes">
			<Overload retVal="" descr="Transposes a matrix (without conjugation).">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="trunc" func="yes">
			<Overload retVal="" descr="Given a list of values, returns the list truncated to 0 decimal places. This command accepts complex numbers as well.">
				<Param name="List" />
			</Overload>
			<Overload retVal="" descr="Given a list of values, as well as an integer n, returns the list truncated to n decimal places. This command accepts complex numbers as well.">
				<Param name="List" />
				<Param name="Integer" />
			</Overload>
			<Overload retVal="" descr="Given a value, returns the value truncated to 0 decimal places. This command accepts complex numbers as well.">
				<Param name="Real" />
			</Overload>
			<Overload retVal="" descr="Given a value, as well as an integer n, returns the value truncated to n decimal places. This command accepts complex numbers as well.">
				<Param name="Real" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="truncate" func="yes">
			<Overload retVal="" descr="Given a polynomial and an integer n, truncates the polynomial at order n.">
				<Param name="Poly" />
				<Param name="Integer" />
			</Overload>
		</KeyWord>
		<KeyWord name="tsimplify" func="yes">
			<Overload retVal="" descr="Returns an expression with transcendental rewritten as complex exponentials">
				<Param name="Expr" />
			</Overload>
		</KeyWord>
		<KeyWord name="unapply" func="yes">
			<Overload retVal="" descr="Returns the function defined by an expression and a variable.">
				<Param name="Expr, Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="uniform" func="yes">
			<Overload retVal="" descr="Uniform probability density function. Computes the probability density of the uniform distribution at x given parameters a and b.">
				<Param name="a" />
				<Param name="b" />
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="uniform_cdf" func="yes">
			<Overload retVal="" descr="Cumulative uniform distribution function. Returns the lower-tail probability of the uniform probability density function for the value x, given parameters a and b.">
				<Param name="a" />
				<Param name="b" />
				<Param name="x" />
				<Param name="[x2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="uniform_icdf" func="yes">
			<Overload retVal="" descr="Inverse cumulative uniform distribution function. Returns the value x such that the uniform lower-tail probability of x, given parameters a and b, is p.">
				<Param name="a" />
				<Param name="b" />
				<Param name="p" />
			</Overload>
		</KeyWord>
		<KeyWord name="valuation" func="yes">
			<Overload retVal="" descr="Returns the valuation (degree of the term of lowest degree) of a polynomial, performed for x.">
				<Param name="Poly" />
			</Overload>
			<Overload retVal="" descr="Returns the valuation (degree of the term of lowest degree) of a polynomial, performed for the given variable.">
				<Param name="Poly" />
				<Param name="Var" />
			</Overload>
		</KeyWord>
		<KeyWord name="variance" func="yes">
			<Overload retVal="" descr="Returns the variance of a list. The optional second list is a list of weights.">
				<Param name="List1" />
				<Param name="[List2]" />
			</Overload>
			<Overload retVal="" descr="Returns the variance of the list of variances of the columns of a matrix.">
				<Param name="Matrix" />
			</Overload>
		</KeyWord>
		<KeyWord name="vector" func="yes">
			<Overload retVal="" descr="Defines a vector from the origin to the given point.">
				<Param name="Point1" />
			</Overload>
			<Overload retVal="" descr="Defines the vector from the first point to the second.">
				<Param name="Point1" />
				<Param name="Point2" />
			</Overload>
		</KeyWord>
		<KeyWord name="vertices" func="yes">
			<Overload retVal="" descr="Returns a vector containing the list of the vertices of a polygon.">
				<Param name="Polygon" />
			</Overload>
		</KeyWord>
		<KeyWord name="vertices_abca" func="yes">
			<Overload retVal="" descr="Returns a vector containing the closed list of the vertices of a polygon.">
				<Param name="Polygon" />
			</Overload>
		</KeyWord>
		<KeyWord name="vpotential" func="yes">
			<Overload retVal="" descr="Given a vector V and a vector of variables, returns the vector U such that curl(U)=V.">
				<Param name="Vector1" />
				<Param name="Vector2" />
			</Overload>
		</KeyWord>
		<KeyWord name="weibull" func="yes">
			<Overload retVal="" descr="Weibull probability density function. Computes the probability density of the Weibull distribution at x given parameters k, n and t. By default, t is 0.">
				<Param name="k, n, [t], x" />
			</Overload>
		</KeyWord>
		<KeyWord name="weibull_cdf" func="yes">
			<Overload retVal="" descr="Cumulative Weibull distribution function. Returns the lower-tail probability of the Weibull probability density function for the value x, given parameters k, n and t. By default, t is 0.">
				<Param name="k" />
				<Param name="n" />
				<Param name="[t]" />
				<Param name="x" />
				<Param name="[x2]" />
			</Overload>
		</KeyWord>
		<KeyWord name="weibull_icdf" func="yes">
			<Overload retVal="" descr="Inverse cumulative Weibull distribution function. Returns the value x such that the Weibull lower-tail probability of x, given parameters k, n and t">
				<Param name="k" />
				<Param name="n" />
				<Param name="[t]" />
				<Param name="x" />
			</Overload>
		</KeyWord>
		<KeyWord name="when" func="yes">
			<Overload retVal="" descr="If condition is true, returns Expr1; otherwise, returns Expr2.">
				<Param name="Cond" />
				<Param name="Expr1" />
				<Param name="Expr2" />
			</Overload>
		</KeyWord>
		<KeyWord name="zip" func="yes">
			<Overload retVal="" descr="Applies a bivariate function to the elements of two lists and returns the results in a vector. &#x0a;Without the default value the length of the vector is the minimum of the lengths of the two lists; with the default value, the shorter list is padded with the default value.">
				<Param name="&#x2018;Function&#x2019;" />
				<Param name="List1" />
				<Param name="List2" />
				<Param name="Default" />
			</Overload>
			<Overload retVal="" descr="Applies a bivariate function to the elements of two vectors and returns the results in a vector. &#x0a;Without the default value the length of the vector is the minimum of the lengths of the two vectors; with the default value, the shorter list is padded with the default value.">
				<Param name="&#x2018;Function&#x2019;" />
				<Param name="Vector1" />
				<Param name="Vector2" />
				<Param name="Default" />
			</Overload>
		</KeyWord>
		<KeyWord name="ztrans" func="yes">
			<Overload retVal="" descr="Returns the Z transform of a sequence.">
				<Param name="Expr" />
				<Param name="[Var]" />
				<Param name="[ZtransVar]" />
			</Overload>
		</KeyWord>
	</AutoComplete>
</NotepadPlus>